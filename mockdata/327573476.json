{"code":0,"data":"<h2>基础用法</h2>\n<pre><code class=\"language-js\">let message = `Hello World`;\nconsole.log(message);\n</code></pre>\n<p>如果你碰巧要在字符串中使用反撇号，你可以使用反斜杠转义：</p>\n<pre><code class=\"language-js\">let message = `Hello \\` World`;\nconsole.log(message);\n</code></pre>\n<p>值得一提的是，在模板字符串中，空格、缩进、换行都会被保留：</p>\n<pre><code class=\"language-js\">let message = `\n\t&lt;ul&gt;\n\t\t&lt;li&gt;1&lt;/li&gt;\n\t\t&lt;li&gt;2&lt;/li&gt;\n\t&lt;/ul&gt;\n`;\nconsole.log(message);\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/ES6/string/string1.png\" alt=\"string\"></p>\n<p>注意，打印的结果中第一行是一个换行，你可以使用 trim 函数消除换行：</p>\n<pre><code class=\"language-js\">let message = `\n\t&lt;ul&gt;\n\t\t&lt;li&gt;1&lt;/li&gt;\n\t\t&lt;li&gt;2&lt;/li&gt;\n\t&lt;/ul&gt;\n`.trim();\nconsole.log(message);\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/ES6/string/string2.png\" alt=\"string\"></p>\n<h2>嵌入变量</h2>\n<p>模板字符串支持嵌入变量，只需要将变量名写在 ${} 之中，其实不止变量，任意的 JavaScript 表达式都是可以的：</p>\n<pre><code class=\"language-js\">let x = 1, y = 2;\nlet message = `&lt;ul&gt;&lt;li&gt;${x}&lt;/li&gt;&lt;li&gt;${x + y}&lt;/li&gt;&lt;/ul&gt;`;\nconsole.log(message); // &lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;\n</code></pre>\n<p>值得一提的是，模板字符串支持嵌套:</p>\n<pre><code class=\"language-js\">let arr = [{value: 1}, {value: 2}];\nlet message = `\n\t&lt;ul&gt;\n\t\t${arr.map((item) =&gt; {\n\t\t\treturn `\n\t\t\t\t&lt;li&gt;${item.value}&lt;/li&gt;\n\t\t\t`\n\t\t})}\n\t&lt;/ul&gt;\n`;\nconsole.log(message);\n</code></pre>\n<p>打印结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/ES6/string/string3.png\" alt=\"string\"></p>\n<p>注意，在 li 标签中间多了一个逗号，这是因为当大括号中的值不是字符串时，会将其转为字符串，比如一个数组 [1, 2, 3] 就会被转为 1,2,3，逗号就是这样产生的。</p>\n<p>如果你要消除这个逗号，你可以先 join 一下：</p>\n<pre><code class=\"language-js\">let arr = [{value: 1}, {value: 2}];\nlet message = `\n\t&lt;ul&gt;\n\t\t${arr.map((item) =&gt; {\n\t\t\treturn `\n\t\t\t\t&lt;li&gt;${item.value}&lt;/li&gt;\n\t\t\t`\n\t\t}).join('')}\n\t&lt;/ul&gt;\n`;\nconsole.log(message);\n</code></pre>\n<p>打印结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/ES6/string/string4.png\" alt=\"string\"></p>\n<h2>标签模板</h2>\n<p>模板标签是一个非常重要的能力，模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串，举个例子：</p>\n<pre><code class=\"language-js\">let x = 'Hi', y = 'Kevin';\nvar res = message`${x}, I am ${y}`;\nconsole.log(res);\n</code></pre>\n<p>我们可以自定义 message 函数来处理返回的字符串:</p>\n<pre><code class=\"language-js\">// literals 文字\n// 注意在这个例子中 literals 的第一个元素和最后一个元素都是空字符串\nfunction message(literals, value1, value2) {\n\tconsole.log(literals); // [ &quot;&quot;, &quot;, I am &quot;, &quot;&quot; ]\n\tconsole.log(value1); // Hi\n\tconsole.log(value2); // Kevin\n}\n</code></pre>\n<p>我们利用这些参数将其拼合回去：</p>\n<pre><code class=\"language-js\">function message(literals, ...values) {\n\tlet result = '';\n\n\tfor (let i = 0; i &lt; values.length; i++) {\n\t\tresult += literals[i];\n\t\tresult += values[i];\n\t}\n\n\tresult += literals[literals.length - 1];\n\n\treturn result;\n}\n</code></pre>\n<p>你也可以这样写：</p>\n<pre><code class=\"language-js\">function message(literals, ...values) {\n\tlet result = literals.reduce((prev, next, i) =&gt; {\n\t    let value = values[i - 1];\n\t    return prev + value + next;\n\t});\n\n\treturn result;\n}\n</code></pre>\n<p>学着拼合回去是一件非常重要的事情，因为我们经过各种处理，最终都还是要拼回去的……</p>\n<h3>oneLine</h3>\n<p>讲完了基础，我们可以来看一些实际的需求：</p>\n<pre><code class=\"language-js\">let message = `\n\tHi,\n\tDaisy!\n\tI am\n\tKevin.\n`;\n</code></pre>\n<p>出于可读性或者其他原因，我希望书写的时候是换行的，但是最终输出的字符是在一行，这就需要借助模板标签来实现了，我们尝试写一个这样的函数：</p>\n<pre><code class=\"language-js\">// oneLine 第一版\nfunction oneLine(template, ...expressions) {\n    let result = template.reduce((prev, next, i) =&gt; {\n        let expression = expressions[i - 1];\n        return prev + expression + next;\n    });\n\n    result = result.replace(/(\\s+)/g, &quot; &quot;);\n    result = result.trim();\n\n    return result;\n}\n</code></pre>\n<p>实现原理很简单，拼合回去然后将多个空白符如换行符、空格等替换成一个空格。</p>\n<p>使用如下：</p>\n<pre><code class=\"language-js\">let message = oneLine `\n    Hi,\n    Daisy!\n    I am\n    Kevin.\n`;\nconsole.log(message); // Hi, Daisy! I am Kevin.\n</code></pre>\n<p>不过你再用下去就会发现一个问题，如果字符间就包括多个空格呢？举个例子：</p>\n<pre><code class=\"language-js\">let message = oneLine`\n  Preserve eg sentences.  Double\n  spaces within input lines.\n`;\n</code></pre>\n<p>如果使用这种匹配方式，<code>sentences.</code> 与 <code>Double</code> 之间的两个空格也会被替换成一个空格。</p>\n<p>我们可以再优化一下，我们想要的效果是将每行前面的多个空格替换成一个空格，其实应该匹配的是换行符以及换行符后面的多个空格，然后将其替换成一个空格，我们可以将正则改成：</p>\n<pre><code class=\"language-js\">result = result.replace(/(\\n\\s*)/g, &quot; &quot;);\n</code></pre>\n<p>就可以正确的匹配代码。最终的代码如下：</p>\n<pre><code class=\"language-js\">// oneLine 第二版\nfunction oneLine(template, ...expressions) {\n    let result = template.reduce((prev, next, i) =&gt; {\n        let expression = expressions[i - 1];\n        return prev + expression + next;\n    });\n\n    result = result.replace(/(\\n\\s*)/g, &quot; &quot;);\n    result = result.trim();\n\n    return result;\n}\n</code></pre>\n<h3>stripIndents</h3>\n<p>假设有这样一段 HTML：</p>\n<pre><code class=\"language-js\">let html = `\n\t&lt;span&gt;1&lt;span&gt;\n\t&lt;span&gt;2&lt;span&gt;\n\t\t&lt;span&gt;3&lt;span&gt;\n`;\n</code></pre>\n<p>为了保持可读性，我希望最终输入的样式为：</p>\n<pre><code class=\"language-js\">&lt;span&gt;1&lt;span&gt;\n&lt;span&gt;2&lt;span&gt;\n&lt;span&gt;3&lt;span&gt;\n</code></pre>\n<p>其实就是匹配每行前面的空格，然后将其替换为空字符串。</p>\n<pre><code class=\"language-js\">// stripIndents 第一版\nfunction stripIndents(template, ...expressions) {\n    let result = template.reduce((prev, next, i) =&gt; {\n        let expression = expressions[i - 1];\n        return prev + expression + next;\n    });\n\n\n    result = result.replace(/\\n[^\\S\\n]*/g, '\\n');\n    result = result.trim();\n\n    return result;\n}\n</code></pre>\n<p>最难的或许就是这个正则表达式了：</p>\n<pre><code class=\"language-js\">result = result.replace(/\\n[^\\S\\n]*/g, '\\n');\n</code></pre>\n<p><code>\\S</code> 表示匹配一个非空白字符</p>\n<p><code>[^\\S\\n]</code> 表示匹配<code>非空白字符</code>和<code>换行符</code>之外的字符，其实也就是空白字符去除换行符</p>\n<p><code>\\n[^\\S\\n]*</code> 表示匹配换行符以及换行符后的多个不包含换行符的空白字符</p>\n<p><code>replace(/\\n[^\\S\\n]*/g, '\\n')</code> 表示将一个换行符以及换行符后的多个不包含换行符的空白字符替换成一个换行符，其实也就是将换行符后面的空白字符消掉的意思</p>\n<p>其实吧，不用写的这么麻烦，我们还可以这样写：</p>\n<pre><code class=\"language-js\">result = result.replace(/^[^\\S\\n]+/gm, '');\n</code></pre>\n<p>看似简单了一点，之所以能这样写，是因为匹配模式的缘故，你会发现，这次除了匹配全局之外，这次我们还匹配了多行，m 标志用于指定多行输入字符串时应该被视为多个行，而且如果使用 m 标志，^ 和 $ 匹配的开始或结束是输入字符串中的每一行，而不是整个字符串的开始或结束。</p>\n<p>[^\\S\\n] 表示匹配空白字符去除换行符</p>\n<p>^[^\\S\\n]+ 表示匹配以<code>去除换行符的空白字符</code>为开头的一个或者多个字符</p>\n<p>result.replace(/^[^\\S\\n]+/gm, '') 表示将每行开头一个或多个<code>去除换行符的空白字符</code>替换成空字符串，也同样达到了目的。</p>\n<p>最终的代码如下：</p>\n<pre><code class=\"language-js\">// stripIndents 第二版\nfunction stripIndents(template, ...expressions) {\n    let result = template.reduce((prev, next, i) =&gt; {\n        let expression = expressions[i - 1];\n        return prev + expression + next;\n    });\n\n\n    result = result.replace(/^[^\\S\\n]+/gm, '');\n    result = result.trim();\n\n    return result;\n}\n</code></pre>\n<h3>stripIndent</h3>\n<p>注意，这次的 stripIndent 相比上面一节的标题少了一个字母 s，而我们想要实现的功能是：</p>\n<pre><code class=\"language-js\">let html = `\n\t&lt;ul&gt;\n\t\t&lt;li&gt;1&lt;/li&gt;\n\t\t&lt;li&gt;2&lt;/li&gt;\n\t\t&lt;li&gt;3&lt;/li&gt;\n\t&lt;ul&gt;\n`;\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/ES6/string/string5.png\" alt=\"string\"></p>\n<p>其实也就是去除第一行的换行以及每一行的部分缩进。</p>\n<p>这个实现就稍微麻烦了一点，因为我们要计算出每一行到底要去除多少个空白字符。</p>\n<p>实现的思路如下：</p>\n<ol>\n<li>使用 match 函数，匹配每一行的空白字符，得到一个包含每一行空白字符的数组</li>\n<li>数组遍历比较，得到最小的空白字符长度</li>\n<li>构建一个正则表达式，然后每一行都替换掉最小长度的空白字符</li>\n</ol>\n<p>实现的代码如下：</p>\n<pre><code class=\"language-js\">let html = `\n\t&lt;ul&gt;\n\t\t&lt;li&gt;1&lt;/li&gt;\n\t\t&lt;li&gt;2&lt;/li&gt;\n\t\t&lt;li&gt;3&lt;/li&gt;\n\t&lt;ul&gt;\n`;\n\n\nfunction stripIndent(template, ...expressions) {\n    let result = template.reduce((prev, next, i) =&gt; {\n        let expression = expressions[i - 1];\n        return prev + expression + next;\n    });\n\n    const match = result.match(/^[^\\S\\n]*(?=\\S)/gm);\n    console.log(match); // Array [ &quot;    &quot;, &quot;        &quot;, &quot;        &quot;, &quot;        &quot;, &quot;    &quot; ]\n\n    const indent = match &amp;&amp; Math.min(...match.map(el =&gt; el.length));\n    console.log(indent); // 4\n\n    if (indent) {\n        const regexp = new RegExp(`^.{${indent}}`, 'gm');\n        console.log(regexp); // /^.{4}/gm\n\n        result =  result.replace(regexp, '');\n    }\n\n    result = result.trim();\n\n    return result;\n}\n</code></pre>\n<p>值得一提的是，我们一般会以为正则中 <code>.</code> 表示匹配任意字符，其实是匹配除换行符之外的任何单个字符。</p>\n<p>最终精简的代码如下：</p>\n<pre><code class=\"language-js\">function stripIndent(template, ...expressions) {\n    let result = template.reduce((prev, next, i) =&gt; {\n        let expression = expressions[i - 1];\n        return prev + expression + next;\n    });\n\n    const match = result.match(/^[^\\S\\n]*(?=\\S)/gm);\n    const indent = match &amp;&amp; Math.min(...match.map(el =&gt; el.length));\n\n    if (indent) {\n        const regexp = new RegExp(`^.{${indent}}`, 'gm');\n        result =  result.replace(regexp, '');\n    }\n\n    result = result.trim();\n\n    return result;\n}\n</code></pre>\n<h3>includeArrays</h3>\n<p>前面我们讲到为了避免 ${} 表达式中返回一个数组，自动转换会导致多个逗号的问题，需要每次都将数组最后再 join('') 一下，再看一遍例子：</p>\n<pre><code class=\"language-js\">let arr = [{value: 1}, {value: 2}];\nlet message = `\n\t&lt;ul&gt;\n\t\t${arr.map((item) =&gt; {\n\t\t\treturn `\n\t\t\t\t&lt;li&gt;${item.value}&lt;/li&gt;\n\t\t\t`\n\t\t}).join('')}\n\t&lt;/ul&gt;\n`;\nconsole.log(message);\n</code></pre>\n<p>利用标签模板，我们可以轻松的解决这个问题：</p>\n<pre><code class=\"language-js\">function includeArrays(template, ...expressions) {\n    let result = template.reduce((prev, next, i) =&gt; {\n\n        let expression = expressions[i - 1];\n\n        if (Array.isArray(expression)) {\n            expression = expression.join('');\n        }\n\n        return prev + expression + next;\n    });\n\n    result = result.trim();\n\n    return result;\n}\n</code></pre>\n<h2>最后</h2>\n<p>你会发现以上这些函数拼合的部分都是重复的，我们完全可以将其封装在一起，根据不同的配置实现不能的功能。如果你想在项目中使用这些函数，可以自己封装一个或者直接使用 <a href=\"https://github.com/declandewet/common-tags\">common-tags</a>。</p>\n<h2>ES6 系列</h2>\n<p>ES6 系列目录地址：https://github.com/mqyqingfeng/Blog。</p>\n<p>ES6 系列预计写二十篇左右，旨在加深 ES6 部分知识点的理解，重点讲解块级作用域、标签模板、箭头函数、Symbol、Set、Map 以及 Promise 的模拟实现、模块加载方案、异步处理等内容。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>\n"}