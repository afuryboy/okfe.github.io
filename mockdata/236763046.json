{"code":0,"data":"<h2>前言</h2>\n<p>在<a href=\"https://github.com/mqyqingfeng/Blog/issues/22\">《JavaScript专题之跟着underscore学防抖》</a>中，我们了解了为什么要限制事件的频繁触发，以及如何做限制：</p>\n<ol>\n<li>debounce 防抖</li>\n<li>throttle 节流</li>\n</ol>\n<p>今天重点讲讲节流的实现。</p>\n<h2>节流</h2>\n<p>节流的原理很简单：</p>\n<p>如果你持续触发事件，每隔一段时间，只执行一次事件。</p>\n<p>根据首次是否执行以及结束后是否执行，效果有所不同，实现的方式也有所不同。\n我们用 leading 代表首次是否执行，trailing 代表结束后是否再执行一次。</p>\n<p>关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器。</p>\n<h2>使用时间戳</h2>\n<p>让我们来看第一种方法：使用时间戳，当触发事件的时候，我们取出当前的时间戳，然后减去之前的时间戳(最一开始值设为 0 )，如果大于设置的时间周期，就执行函数，然后更新时间戳为当前的时间戳，如果小于，就不执行。</p>\n<p>看了这个表述，是不是感觉已经可以写出代码了…… 让我们来写第一版的代码：</p>\n<pre><code class=\"language-js\">// 第一版\nfunction throttle(func, wait) {\n    var context, args;\n    var previous = 0;\n\n    return function() {\n        var now = +new Date();\n        context = this;\n        args = arguments;\n        if (now - previous &gt; wait) {\n            func.apply(context, args);\n            previous = now;\n        }\n    }\n}\n</code></pre>\n<p>例子依然是用讲 debounce 中的例子，如果你要使用：</p>\n<pre><code class=\"language-js\">container.onmousemove = throttle(getUserAction, 1000);\n</code></pre>\n<p>效果演示如下：</p>\n<p><img src=\"https://github.com/mqyqingfeng/Blog/raw/master/Images/throttle/throttle1.gif\" alt=\"使用时间戳\"></p>\n<p>我们可以看到：当鼠标移入的时候，事件立刻执行，每过 1s 会执行一次，如果在 4.2s 停止触发，以后不会再执行事件。</p>\n<h2>使用定时器</h2>\n<p>接下来，我们讲讲第二种实现方式，使用定时器。</p>\n<p>当触发事件的时候，我们设置一个定时器，再触发事件的时候，如果定时器存在，就不执行，直到定时器执行，然后执行函数，清空定时器，这样就可以设置下个定时器。</p>\n<pre><code class=\"language-js\">// 第二版\nfunction throttle(func, wait) {\n    var timeout;\n    var previous = 0;\n\n    return function() {\n        context = this;\n        args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(function(){\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n</code></pre>\n<p>为了让效果更加明显，我们设置 wait 的时间为 3s，效果演示如下：</p>\n<p><img src=\"https://github.com/mqyqingfeng/Blog/raw/master/Images/throttle/throttle2.gif\" alt=\"使用定时器\"></p>\n<p>我们可以看到：当鼠标移入的时候，事件不会立刻执行，晃了 3s 后终于执行了一次，此后每 3s 执行一次，当数字显示为 3 的时候，立刻移出鼠标，相当于大约 9.2s 的时候停止触发，但是依然会在第 12s 的时候执行一次事件。</p>\n<p>所以比较两个方法：</p>\n<ol>\n<li>第一种事件会立刻执行，第二种事件会在 n 秒后第一次执行</li>\n<li>第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后依然会再执行一次事件</li>\n</ol>\n<h2>双剑合璧</h2>\n<p>那我们想要一个什么样的呢？</p>\n<p>有人就说了：我想要一个有头有尾的！就是鼠标移入能立刻执行，停止触发的时候还能再执行一次！</p>\n<p>所以我们综合两者的优势，然后双剑合璧，写一版代码：</p>\n<pre><code class=\"language-js\">// 第三版\nfunction throttle(func, wait) {\n    var timeout, context, args, result;\n    var previous = 0;\n\n    var later = function() {\n        previous = +new Date();\n        timeout = null;\n        func.apply(context, args)\n    };\n\n    var throttled = function() {\n        var now = +new Date();\n        //下次触发 func 剩余的时间\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n         // 如果没有剩余的时间了或者你改了系统时间\n        if (remaining &lt;= 0 || remaining &gt; wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n        } else if (!timeout) {\n            timeout = setTimeout(later, remaining);\n        }\n    };\n    return throttled;\n}\n</code></pre>\n<p>效果演示如下：</p>\n<p><img src=\"https://github.com/mqyqingfeng/Blog/raw/master/Images/throttle/throttle3.gif\" alt=\"throttle3\"></p>\n<p>我们可以看到：鼠标移入，事件立刻执行，晃了 3s，事件再一次执行，当数字变成 3 的时候，也就是 6s 后，我们立刻移出鼠标，停止触发事件，9s 的时候，依然会再执行一次事件。</p>\n<h2>优化</h2>\n<p>但是我有时也希望无头有尾，或者有头无尾，这个咋办？</p>\n<p>那我们设置个 options 作为第三个参数，然后根据传的值判断到底哪种效果，我们约定:</p>\n<p>leading：false 表示禁用第一次执行\ntrailing: false 表示禁用停止触发的回调</p>\n<p>我们来改一下代码：</p>\n<pre><code class=\"language-js\">// 第四版\nfunction throttle(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n        previous = options.leading === false ? 0 : new Date().getTime();\n        timeout = null;\n        func.apply(context, args);\n        if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n        var now = new Date().getTime();\n        if (!previous &amp;&amp; options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining &lt;= 0 || remaining &gt; wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n            if (!timeout) context = args = null;\n        } else if (!timeout &amp;&amp; options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n    };\n    return throttled;\n}\n</code></pre>\n<h2>取消</h2>\n<p>在 debounce 的实现中，我们加了一个 cancel 方法，throttle 我们也加个 cancel 方法：</p>\n<pre><code class=\"language-js\">// 第五版 非完整代码，完整代码请查看最后的演示代码链接\n...\nthrottled.cancel = function() {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = null;\n}\n...\n</code></pre>\n<h2>注意</h2>\n<p>我们要注意 underscore 的实现中有这样一个问题：</p>\n<p>那就是 <code>leading：false</code> 和 <code>trailing: false</code> 不能同时设置。</p>\n<p>如果同时设置的话，比如当你将鼠标移出的时候，因为 trailing 设置为 false，停止触发的时候不会设置定时器，所以只要再过了设置的时间，再移入的话，就会立刻执行，就违反了 leading: false，bug 就出来了，所以，这个 throttle 只有三种用法：</p>\n<pre><code class=\"language-js\">container.onmousemove = throttle(getUserAction, 1000);\ncontainer.onmousemove = throttle(getUserAction, 1000, {\n    leading: false\n});\ncontainer.onmousemove = throttle(getUserAction, 1000, {\n    trailing: false\n});\n</code></pre>\n<p>至此我们已经完整实现了一个 underscore 中的 throttle 函数，恭喜，撒花！</p>\n<h2>演示代码</h2>\n<p>相关的代码可以在 <a href=\"https://github.com/mqyqingfeng/Blog/tree/master/demos/throttle\">Github 博客仓库</a> 中找到</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}