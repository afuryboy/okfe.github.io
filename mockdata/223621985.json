{"code":0,"data":"<h2>前言</h2>\n<p>在上篇<a href=\"https://github.com/mqyqingfeng/Blog/issues/4\">《JavaScript深入之执行上下文栈》</a>中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p>\n<p>对于每个执行上下文，都有三个重要属性：</p>\n<ul>\n<li>变量对象(Variable object，VO)</li>\n<li>作用域链(Scope chain)</li>\n<li>this</li>\n</ul>\n<p>今天重点讲讲创建变量对象的过程。</p>\n<h2>变量对象</h2>\n<p>变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。</p>\n<p>因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文下的变量对象和函数上下文下的变量对象。</p>\n<h2>全局上下文</h2>\n<p>我们先了解一个概念，叫全局对象。在 <a href=\"http://www.w3school.com.cn/jsref/jsref_obj_global.asp\">W3School</a> 中也有介绍：</p>\n<blockquote>\n<p>全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。</p>\n</blockquote>\n<blockquote>\n<p>在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</p>\n</blockquote>\n<blockquote>\n<p>例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。</p>\n</blockquote>\n<p>如果看的不是很懂的话，容我再来介绍下全局对象:</p>\n<p>1.可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。</p>\n<pre><code class=\"language-js\">console.log(this);\n</code></pre>\n<p>2.全局对象是由 Object 构造函数实例化的一个对象。</p>\n<pre><code class=\"language-js\">console.log(this instanceof Object);\n</code></pre>\n<p>3.预定义了一堆，嗯，一大堆函数和属性。</p>\n<pre><code class=\"language-js\">// 都能生效\nconsole.log(Math.random());\nconsole.log(this.Math.random());\n</code></pre>\n<p>4.作为全局变量的宿主。</p>\n<pre><code class=\"language-js\">var a = 1;\nconsole.log(this.a);\n</code></pre>\n<p>5.客户端 JavaScript 中，全局对象有 window 属性指向自身。</p>\n<pre><code class=\"language-js\">var a = 1;\nconsole.log(window.a);\n\nthis.window.b = 2;\nconsole.log(this.b);\n</code></pre>\n<p>花了一个大篇幅介绍全局对象，其实就想说：</p>\n<p>全局上下文中的变量对象就是全局对象呐！</p>\n<h2>函数上下文</h2>\n<p>在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。</p>\n<p>活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。</p>\n<p>活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。</p>\n<h2>执行过程</h2>\n<p>执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：</p>\n<ol>\n<li>进入执行上下文</li>\n<li>代码执行</li>\n</ol>\n<h3>进入执行上下文</h3>\n<p>当进入执行上下文时，这时候还没有执行代码，</p>\n<p>变量对象会包括：</p>\n<ol>\n<li>\n<p>函数的所有形参 (如果是函数上下文)</p>\n<ul>\n<li>由名称和对应值组成的一个变量对象的属性被创建</li>\n<li>没有实参，属性值设为 undefined</li>\n</ul>\n</li>\n<li>\n<p>函数声明</p>\n<ul>\n<li>由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建</li>\n<li>如果变量对象已经存在相同名称的属性，则完全替换这个属性</li>\n</ul>\n</li>\n<li>\n<p>变量声明</p>\n<ul>\n<li>由名称和对应值（undefined）组成一个变量对象的属性被创建；</li>\n<li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li>\n</ul>\n</li>\n</ol>\n<p>举个例子：</p>\n<pre><code class=\"language-js\">function foo(a) {\n  var b = 2;\n  function c() {}\n  var d = function() {};\n\n  b = 3;\n\n}\n\nfoo(1);\n</code></pre>\n<p>在进入执行上下文后，这时候的 AO 是：</p>\n<pre><code class=\"language-js\">AO = {\n    arguments: {\n        0: 1,\n        length: 1\n    },\n    a: 1,\n    b: undefined,\n    c: reference to function c(){},\n    d: undefined\n}\n</code></pre>\n<h3>代码执行</h3>\n<p>在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值</p>\n<p>还是上面的例子，当代码执行完后，这时候的 AO 是：</p>\n<pre><code class=\"language-js\">AO = {\n    arguments: {\n        0: 1,\n        length: 1\n    },\n    a: 1,\n    b: 3,\n    c: reference to function c(){},\n    d: reference to FunctionExpression &quot;d&quot;\n}\n</code></pre>\n<p>到这里变量对象的创建过程就介绍完了，让我们简洁的总结我们上述所说：</p>\n<ol>\n<li>\n<p>全局上下文的变量对象初始化是全局对象</p>\n</li>\n<li>\n<p>函数上下文的变量对象初始化只包括 Arguments 对象</p>\n</li>\n<li>\n<p>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</p>\n</li>\n<li>\n<p>在代码执行阶段，会再次修改变量对象的属性值</p>\n</li>\n</ol>\n<h2>思考题</h2>\n<p>最后让我们看几个例子：</p>\n<p>1.第一题</p>\n<pre><code class=\"language-js\">function foo() {\n    console.log(a);\n    a = 1;\n}\n\nfoo(); // ???\n\nfunction bar() {\n    a = 1;\n    console.log(a);\n}\nbar(); // ???\n</code></pre>\n<p>第一段会报错：<code>Uncaught ReferenceError: a is not defined</code>。</p>\n<p>第二段会打印：<code>1</code>。</p>\n<p>这是因为函数中的 &quot;a&quot; 并没有通过 var 关键字声明，所有不会被存放在 AO 中。</p>\n<p>第一段执行 console 的时候， AO 的值是：</p>\n<pre><code class=\"language-js\">AO = {\n    arguments: {\n        length: 0\n    }\n}\n</code></pre>\n<p>没有 a 的值，然后就会到全局去找，全局也没有，所以会报错。</p>\n<p>当第二段执行 console 的时候，全局对象已经被赋予了 a 属性，这时候就可以从全局找到 a 的值，所以会打印 1。</p>\n<p>2.第二题</p>\n<pre><code class=\"language-js\">console.log(foo);\n\nfunction foo(){\n    console.log(&quot;foo&quot;);\n}\n\nvar foo = 1;\n</code></pre>\n<p>会打印函数，而不是 undefined 。</p>\n<p>这是因为在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</p>\n<h2>下一篇文章</h2>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/6\">《JavaScript深入之作用域链》</a></p>\n<h2>本文相关链接</h2>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/4\">《JavaScript深入之执行上下文栈》</a></p>\n<h2>深入系列</h2>\n<p>JavaScript深入系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>\n"}