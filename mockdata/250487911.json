{"code":0,"data":"<h2>定义</h2>\n<p>维基百科中对偏函数 (Partial application) 的定义为：</p>\n<blockquote>\n<p>In computer science, partial application (or partial function application) refers to the process of fixing a number of arguments to a function, producing another function of smaller arity.</p>\n</blockquote>\n<p>翻译成中文：</p>\n<p>在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。</p>\n<p>什么是元？元是指函数参数的个数，比如一个带有两个参数的函数被称为二元函数。</p>\n<p>举个简单的例子：</p>\n<pre><code class=\"language-js\">function add(a, b) {\n    return a + b;\n}\n\n// 执行 add 函数，一次传入两个参数即可\nadd(1, 2) // 3\n\n// 假设有一个 partial 函数可以做到局部应用\nvar addOne = partial(add, 1);\n\naddOne(2) // 3\n</code></pre>\n<p>个人觉得翻译成“局部应用”或许更贴切些，以下全部使用“局部应用”。</p>\n<h2>柯里化与局部应用</h2>\n<p>如果看过上一篇文章<a href=\"https://github.com/mqyqingfeng/Blog/issues/42\">《JavaScript专题之柯里化》</a>，实际上你会发现这个例子和柯里化太像了，所以两者到底是有什么区别呢？</p>\n<p>其实也很明显：</p>\n<p>柯里化是将一个多参数函数转换成多个单参数函数，也就是将一个 n 元函数转换成 n 个一元函数。</p>\n<p>局部应用则是固定一个函数的一个或者多个参数，也就是将一个 n 元函数转换成一个 n - x 元函数。</p>\n<p>如果说两者有什么关系的话，引用 <a href=\"https://github.com/hemanth/functional-programming-jargon#partial-application\">functional-programming-jargon</a> 中的描述就是：</p>\n<blockquote>\n<p>Curried functions are automatically partially applied.</p>\n</blockquote>\n<h2>partial</h2>\n<p>我们今天的目的是模仿 underscore 写一个 partial 函数，比起 curry 函数，这个显然简单了很多。</p>\n<p>也许你在想我们可以直接使用 bind 呐，举个例子：</p>\n<pre><code class=\"language-js\">function add(a, b) {\n    return a + b;\n}\n\nvar addOne = add.bind(null, 1);\n\naddOne(2) // 3\n</code></pre>\n<p>然而使用 bind 我们还是改变了 this 指向，我们要写一个不改变 this 指向的方法。</p>\n<h2>第一版</h2>\n<p>根据之前的表述，我们可以尝试着写出第一版：</p>\n<pre><code class=\"language-js\">// 第一版\n// 似曾相识的代码\nfunction partial(fn) {\n    var args = [].slice.call(arguments, 1);\n    return function() {\n        var newArgs = args.concat([].slice.call(arguments));\n        return fn.apply(this, newArgs);\n    };\n};\n</code></pre>\n<p>我们来写个 demo 验证下 this 的指向：</p>\n<pre><code class=\"language-js\">function add(a, b) {\n    return a + b + this.value;\n}\n\n// var addOne = add.bind(null, 1);\nvar addOne = partial(add, 1);\n\nvar value = 1;\nvar obj = {\n    value: 2,\n    addOne: addOne\n}\nobj.addOne(2); // ???\n// 使用 bind 时，结果为 4\n// 使用 partial 时，结果为 5\n</code></pre>\n<h2>第二版</h2>\n<p>然而正如 curry 函数可以使用占位符一样，我们希望 partial 函数也可以实现这个功能，我们再来写第二版：</p>\n<pre><code class=\"language-js\">// 第二版\nvar _ = {};\n\nfunction partial(fn) {\n    var args = [].slice.call(arguments, 1);\n    return function() {\n        var position = 0, len = args.length;\n        for(var i = 0; i &lt; len; i++) {\n            args[i] = args[i] === _ ? arguments[position++] : args[i]\n        }\n        while(position &lt; arguments.length) args.push(arguments[position++]);\n        return fn.apply(this, args);\n    };\n};\n</code></pre>\n<p>我们验证一下：</p>\n<pre><code class=\"language-js\">var subtract = function(a, b) { return b - a; };\nsubFrom20 = partial(subtract, _, 20);\nsubFrom20(5);\n</code></pre>\n<h2>写在最后</h2>\n<p>值得注意的是：underscore 和 lodash 都提供了 partial 函数，但只有 lodash 提供了 curry 函数。</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}