{"code":0,"data":"<h2>bind</h2>\n<p>一句话介绍 bind:</p>\n<blockquote>\n<p>bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN )</p>\n</blockquote>\n<p>由此我们可以首先得出 bind 函数的两个特点：</p>\n<ol>\n<li>返回一个函数</li>\n<li>可以传入参数</li>\n</ol>\n<h2>返回函数的模拟实现</h2>\n<p>从第一个特点开始，我们举个例子：</p>\n<pre><code class=\"language-js\">var foo = {\n    value: 1\n};\n\nfunction bar() {\n    console.log(this.value);\n}\n\n// 返回了一个函数\nvar bindFoo = bar.bind(foo); \n\nbindFoo(); // 1\n</code></pre>\n<p>关于指定 this 的指向，我们可以使用 call 或者 apply 实现，关于 call 和 apply 的模拟实现，可以查看<a href=\"https://github.com/mqyqingfeng/Blog/issues/11\">《JavaScript深入之call和apply的模拟实现》</a>。我们来写第一版的代码：</p>\n<pre><code class=\"language-js\">// 第一版\nFunction.prototype.bind2 = function (context) {\n    var self = this;\n    return function () {\n        return self.apply(context);\n    }\n\n}\n</code></pre>\n<p>此外，之所以 <code>return self.apply(context)</code>，是考虑到绑定函数可能是有返回值的，依然是这个例子：</p>\n<pre><code class=\"language-js\">var foo = {\n    value: 1\n};\n\nfunction bar() {\n\treturn this.value;\n}\n\nvar bindFoo = bar.bind(foo);\n\nconsole.log(bindFoo()); // 1\n</code></pre>\n<h2>传参的模拟实现</h2>\n<p>接下来看第二点，可以传入参数。这个就有点让人费解了，我在 bind 的时候，是否可以传参呢？我在执行 bind 返回的函数的时候，可不可以传参呢？让我们看个例子：</p>\n<pre><code class=\"language-js\">var foo = {\n    value: 1\n};\n\nfunction bar(name, age) {\n    console.log(this.value);\n    console.log(name);\n    console.log(age);\n\n}\n\nvar bindFoo = bar.bind(foo, 'daisy');\nbindFoo('18');\n// 1\n// daisy\n// 18\n</code></pre>\n<p>函数需要传 name 和 age 两个参数，竟然还可以在 bind 的时候，只传一个 name，在执行返回的函数的时候，再传另一个参数 age!</p>\n<p>这可咋办？不急，我们用 arguments 进行处理：</p>\n<pre><code class=\"language-js\">// 第二版\nFunction.prototype.bind2 = function (context) {\n\n    var self = this;\n    // 获取bind2函数从第二个参数到最后一个参数\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    return function () {\n        // 这个时候的arguments是指bind返回的函数传入的参数\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(context, args.concat(bindArgs));\n    }\n\n}\n</code></pre>\n<h2>构造函数效果的模拟实现</h2>\n<p>完成了这两点，最难的部分到啦！因为 bind 还有一个特点，就是</p>\n<blockquote>\n<p>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p>\n</blockquote>\n<p>也就是说当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效，但传入的参数依然生效。举个例子：</p>\n<pre><code class=\"language-js\">var value = 2;\n\nvar foo = {\n    value: 1\n};\n\nfunction bar(name, age) {\n    this.habit = 'shopping';\n    console.log(this.value);\n    console.log(name);\n    console.log(age);\n}\n\nbar.prototype.friend = 'kevin';\n\nvar bindFoo = bar.bind(foo, 'daisy');\n\nvar obj = new bindFoo('18');\n// undefined\n// daisy\n// 18\nconsole.log(obj.habit);\nconsole.log(obj.friend);\n// shopping\n// kevin\n</code></pre>\n<p>注意：尽管在全局和 foo 中都声明了 value 值，最后依然返回了 undefind，说明绑定的 this 失效了，如果大家了解 new 的模拟实现，就会知道这个时候的 this 已经指向了 obj。</p>\n<p>(哈哈，我这是为我的下一篇文章<a href=\"https://github.com/mqyqingfeng/Blog/issues/13\">《JavaScript深入系列之new的模拟实现》</a>打广告)。</p>\n<p>所以我们可以通过修改返回的函数的原型来实现，让我们写一下：</p>\n<pre><code class=\"language-js\">// 第三版\nFunction.prototype.bind2 = function (context) {\n    var self = this;\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var fBound = function () {\n        var bindArgs = Array.prototype.slice.call(arguments);\n        // 当作为构造函数时，this 指向实例，此时结果为 true，将绑定函数的 this 指向该实例，可以让实例获得来自绑定函数的值\n        // 以上面的是 demo 为例，如果改成 `this instanceof fBound ? null : context`，实例只是一个空对象，将 null 改成 this ，实例会具有 habit 属性\n        // 当作为普通函数时，this 指向 window，此时结果为 false，将绑定函数的 this 指向 context\n        return self.apply(this instanceof fBound ? this : context, args.concat(bindArgs));\n    }\n    // 修改返回函数的 prototype 为绑定函数的 prototype，实例就可以继承绑定函数的原型中的值\n    fBound.prototype = this.prototype;\n    return fBound;\n}\n\n</code></pre>\n<p>如果对原型链稍有困惑，可以查看<a href=\"https://github.com/mqyqingfeng/Blog/issues/2\">《JavaScript深入之从原型到原型链》</a>。</p>\n<h2>构造函数效果的优化实现</h2>\n<p>但是在这个写法中，我们直接将 fBound.prototype = this.prototype，我们直接修改 fBound.prototype 的时候，也会直接修改绑定函数的 prototype。这个时候，我们可以通过一个空函数来进行中转：</p>\n<pre><code class=\"language-js\">// 第四版\nFunction.prototype.bind2 = function (context) {\n\n    var self = this;\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var fNOP = function () {};\n\n    var fBound = function () {\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof fNOP ? this : context, args.concat(bindArgs));\n    }\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n    return fBound;\n}\n</code></pre>\n<p>到此为止，大的问题都已经解决，给自己一个赞！o(￣▽￣)ｄ</p>\n<h2>三个小问题</h2>\n<p>接下来处理些小问题:</p>\n<p><strong>1.apply 这段代码跟 MDN 上的稍有不同</strong></p>\n<p>在 MDN 中文版讲 bind 的模拟实现时，apply 这里的代码是：</p>\n<pre><code class=\"language-js\">\nself.apply(this instanceof self ? this : context || this, args.concat(bindArgs))\n\n</code></pre>\n<p>多了一个关于 context 是否存在的判断，然而这个是错误的！</p>\n<p>举个例子：</p>\n<pre><code class=\"language-js\">var value = 2;\nvar foo = {\n    value: 1,\n    bar: bar.bind(null)\n};\n\nfunction bar() {\n    console.log(this.value);\n}\n\nfoo.bar() // 2\n</code></pre>\n<p>以上代码正常情况下会打印 2，如果换成了 context || this，这段代码就会打印 1！</p>\n<p>所以这里不应该进行 context 的判断，大家查看 MDN 同样内容的英文版，就不存在这个判断！</p>\n<p>(2018年3月27日更新，中文版已经改了😀)</p>\n<p><strong>2.调用 bind 的不是函数咋办？</strong></p>\n<p>不行，我们要报错！</p>\n<pre><code class=\"language-js\">if (typeof this !== &quot;function&quot;) {\n  throw new Error(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;);\n}\n</code></pre>\n<p><strong>3.我要在线上用</strong></p>\n<p>那别忘了做个兼容：</p>\n<pre><code class=\"language-js\">Function.prototype.bind = Function.prototype.bind || function () {\n    ……\n};\n</code></pre>\n<p>当然最好是用 <a href=\"https://github.com/es-shims/es5-shim\">es5-shim</a> 啦。</p>\n<h2>最终代码</h2>\n<p>所以最最后的代码就是：</p>\n<pre><code class=\"language-js\">Function.prototype.bind2 = function (context) {\n\n    if (typeof this !== &quot;function&quot;) {\n      throw new Error(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;);\n    }\n\n    var self = this;\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var fNOP = function () {};\n\n    var fBound = function () {\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof fNOP ? this : context, args.concat(bindArgs));\n    }\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n    return fBound;\n}\n</code></pre>\n<h2>下一篇文章</h2>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/13\">《JavaScript深入系列之new的模拟实现》</a></p>\n<h2>相关链接</h2>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/2\">《JavaScript深入之从原型到原型链》</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/11\">《JavaScript深入之call和apply的模拟实现》</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/13\">《JavaScript深入系列之new的模拟实现》</a></p>\n<h2>深入系列</h2>\n<p>JavaScript深入系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>\n"}