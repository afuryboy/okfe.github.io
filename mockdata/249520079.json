{"code":0,"data":"<h2>定义</h2>\n<p>维基百科中对柯里化 (Currying) 的定义为：</p>\n<blockquote>\n<p>In mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions, each with a single argument.</p>\n</blockquote>\n<p>翻译成中文：</p>\n<p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n<p>举个例子：</p>\n<pre><code class=\"language-js\">function add(a, b) {\n    return a + b;\n}\n\n// 执行 add 函数，一次传入两个参数即可\nadd(1, 2) // 3\n\n// 假设有一个 curry 函数可以做到柯里化\nvar addCurry = curry(add);\naddCurry(1)(2) // 3\n</code></pre>\n<h2>用途</h2>\n<p>我们会讲到如何写出这个 curry 函数，并且会将这个 curry 函数写的很强大，但是在编写之前，我们需要知道柯里化到底有什么用？</p>\n<p>举个例子：</p>\n<pre><code class=\"language-js\">// 示意而已\nfunction ajax(type, url, data) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(type, url, true);\n    xhr.send(data);\n}\n\n// 虽然 ajax 这个函数非常通用，但在重复调用的时候参数冗余\najax('POST', 'www.test.com', &quot;name=kevin&quot;)\najax('POST', 'www.test2.com', &quot;name=kevin&quot;)\najax('POST', 'www.test3.com', &quot;name=kevin&quot;)\n\n// 利用 curry\nvar ajaxCurry = curry(ajax);\n\n// 以 POST 类型请求数据\nvar post = ajaxCurry('POST');\npost('www.test.com', &quot;name=kevin&quot;);\n\n// 以 POST 类型请求来自于 www.test.com 的数据\nvar postFromTest = post('www.test.com');\npostFromTest(&quot;name=kevin&quot;);\n</code></pre>\n<p>想想 jQuery 虽然有 $.ajax 这样通用的方法，但是也有 $.get 和 $.post 的语法糖。(当然 jQuery 底层是否是这样做的，我就没有研究了)。</p>\n<p>curry 的这种用途可以理解为：参数复用。本质上是降低通用性，提高适用性。</p>\n<p>可是即便如此，是不是依然感觉没什么用呢？</p>\n<p>如果我们仅仅是把参数一个一个传进去，意义可能不大，但是如果我们是把柯里化后的函数传给其他函数比如 map 呢？</p>\n<p>举个例子：</p>\n<p>比如我们有这样一段数据：</p>\n<pre><code class=\"language-js\">var person = [{name: 'kevin'}, {name: 'daisy'}]\n</code></pre>\n<p>如果我们要获取所有的 name 值，我们可以这样做：</p>\n<pre><code class=\"language-js\">var name = person.map(function (item) {\n    return item.name;\n})\n</code></pre>\n<p>不过如果我们有 curry 函数：</p>\n<pre><code class=\"language-js\">var prop = curry(function (key, obj) {\n    return obj[key]\n});\n\nvar name = person.map(prop('name'))\n</code></pre>\n<p>我们为了获取 name 属性还要再编写一个 prop 函数，是不是又麻烦了些？</p>\n<p>但是要注意，prop 函数编写一次后，以后可以多次使用，实际上代码从原本的三行精简成了一行，而且你看代码是不是更加易懂了？</p>\n<p><code>person.map(prop('name'))</code> 就好像直白的告诉你：person 对象遍历(map)获取(prop) name 属性。</p>\n<p>是不是感觉有点意思了呢？</p>\n<h2>第一版</h2>\n<p>未来我们会接触到更多有关柯里化的应用，不过那是未来的事情了，现在我们该编写这个 curry 函数了。</p>\n<p>一个经常会看到的 curry 函数的实现为：</p>\n<pre><code class=\"language-js\">// 第一版\nvar curry = function (fn) {\n    var args = [].slice.call(arguments, 1);\n    return function() {\n        var newArgs = args.concat([].slice.call(arguments));\n        return fn.apply(this, newArgs);\n    };\n};\n</code></pre>\n<p>我们可以这样使用：</p>\n<pre><code class=\"language-js\">function add(a, b) {\n    return a + b;\n}\n\nvar addCurry = curry(add, 1, 2);\naddCurry() // 3\n//或者\nvar addCurry = curry(add, 1);\naddCurry(2) // 3\n//或者\nvar addCurry = curry(add);\naddCurry(1, 2) // 3\n</code></pre>\n<p>已经有柯里化的感觉了，但是还没有达到要求，不过我们可以把这个函数用作辅助函数，帮助我们写真正的 curry 函数。</p>\n<h2>第二版</h2>\n<pre><code class=\"language-js\">// 第二版\nfunction sub_curry(fn) {\n    var args = [].slice.call(arguments, 1);\n    return function() {\n        return fn.apply(this, args.concat([].slice.call(arguments)));\n    };\n}\n\nfunction curry(fn, length) {\n\n    length = length || fn.length;\n\n    var slice = Array.prototype.slice;\n\n    return function() {\n        if (arguments.length &lt; length) {\n            var combined = [fn].concat(slice.call(arguments));\n            return curry(sub_curry.apply(this, combined), length - arguments.length);\n        } else {\n            return fn.apply(this, arguments);\n        }\n    };\n}\n</code></pre>\n<p>我们验证下这个函数：</p>\n<pre><code class=\"language-js\">var fn = curry(function(a, b, c) {\n    return [a, b, c];\n});\n\nfn(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\nfn(&quot;a&quot;, &quot;b&quot;)(&quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\nfn(&quot;a&quot;)(&quot;b&quot;)(&quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\nfn(&quot;a&quot;)(&quot;b&quot;, &quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n</code></pre>\n<p>效果已经达到我们的预期，然而这个 curry 函数的实现好难理解呐……</p>\n<p>为了让大家更好的理解这个 curry 函数，我给大家写个极简版的代码：</p>\n<pre><code class=\"language-js\">function sub_curry(fn){\n    return function(){\n        return fn()\n    }\n}\n\nfunction curry(fn, length){\n    length = length || 4;\n    return function(){\n        if (length &gt; 1) {\n            return curry(sub_curry(fn), --length)\n        }\n        else {\n            return fn()\n        }\n    }\n}\n\nvar fn0 = function(){\n    console.log(1)\n}\n\nvar fn1 = curry(fn0)\n\nfn1()()()() // 1\n</code></pre>\n<p>大家先从理解这个 curry 函数开始。</p>\n<p>当执行 fn1() 时，函数返回：</p>\n<pre><code class=\"language-js\">curry(sub_curry(fn0))\n// 相当于\ncurry(function(){\n    return fn0()\n})\n</code></pre>\n<p>当执行 fn1()() 时，函数返回：</p>\n<pre><code class=\"language-js\">curry(sub_curry(function(){\n    return fn0()\n}))\n// 相当于\ncurry(function(){\n    return (function(){\n        return fn0()\n    })()\n})\n// 相当于\ncurry(function(){\n    return fn0()\n})\n</code></pre>\n<p>当执行 fn1()()() 时，函数返回：</p>\n<pre><code class=\"language-js\">// 跟 fn1()() 的分析过程一样\ncurry(function(){\n    return fn0()\n})\n</code></pre>\n<p>当执行 fn1()()()() 时，因为此时 length &gt; 2 为 false，所以执行 fn()：</p>\n<pre><code class=\"language-js\">fn()\n// 相当于\n(function(){\n    return fn0()\n})()\n// 相当于\nfn0()\n// 执行 fn0 函数，打印 1\n</code></pre>\n<p>再回到真正的 curry 函数，我们以下面的例子为例：</p>\n<pre><code class=\"language-js\">var fn0 = function(a, b, c, d) {\n    return [a, b, c, d];\n}\n\nvar fn1 = curry(fn0);\n\nfn1(&quot;a&quot;, &quot;b&quot;)(&quot;c&quot;)(&quot;d&quot;)\n</code></pre>\n<p>当执行 fn1(&quot;a&quot;, &quot;b&quot;) 时：</p>\n<pre><code class=\"language-js\">fn1(&quot;a&quot;, &quot;b&quot;)\n// 相当于\ncurry(fn0)(&quot;a&quot;, &quot;b&quot;)\n// 相当于\ncurry(sub_curry(fn0, &quot;a&quot;, &quot;b&quot;))\n// 相当于\n// 注意 ... 只是一个示意，表示该函数执行时传入的参数会作为 fn0 后面的参数传入\ncurry(function(...){\n    return fn0(&quot;a&quot;, &quot;b&quot;, ...)\n})\n</code></pre>\n<p>当执行 fn1(&quot;a&quot;, &quot;b&quot;)(&quot;c&quot;) 时，函数返回：</p>\n<pre><code class=\"language-js\">curry(sub_curry(function(...){\n    return fn0(&quot;a&quot;, &quot;b&quot;, ...)\n}), &quot;c&quot;)\n// 相当于\ncurry(function(...){\n    return (function(...) {return fn0(&quot;a&quot;, &quot;b&quot;, ...)})(&quot;c&quot;)\n})\n// 相当于\ncurry(function(...){\n     return fn0(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, ...)\n})\n</code></pre>\n<p>当执行 fn1(&quot;a&quot;, &quot;b&quot;)(&quot;c&quot;)(&quot;d&quot;) 时，此时 arguments.length &lt; length 为 false ，执行 fn(arguments)，相当于：</p>\n<pre><code class=\"language-js\">(function(...){\n    return fn0(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, ...)\n})(&quot;d&quot;)\n// 相当于\nfn0(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)\n</code></pre>\n<p>函数执行结束。</p>\n<p>所以，其实整段代码又很好理解：</p>\n<p>sub_curry 的作用就是用函数包裹原函数，然后给原函数传入之前的参数，当执行 fn0(...)(...) 的时候，执行包裹函数，返回原函数，然后再调用 sub_curry 再包裹原函数，然后将新的参数混合旧的参数再传入原函数，直到函数参数的数目达到要求为止。</p>\n<p>如果要明白 curry 函数的运行原理，大家还是要动手写一遍，尝试着分析执行步骤。</p>\n<h2>更易懂的实现</h2>\n<p>当然了，如果你觉得还是无法理解，你可以选择下面这种实现方式，可以实现同样的效果：</p>\n<pre><code class=\"language-js\">function curry(fn, args) {\n    var length = fn.length;\n\n    args = args || [];\n\n    return function() {\n\n        var _args = args.slice(0),\n\n            arg, i;\n\n        for (i = 0; i &lt; arguments.length; i++) {\n\n            arg = arguments[i];\n\n            _args.push(arg);\n\n        }\n        if (_args.length &lt; length) {\n            return curry.call(this, fn, _args);\n        }\n        else {\n            return fn.apply(this, _args);\n        }\n    }\n}\n\n\nvar fn = curry(function(a, b, c) {\n    console.log([a, b, c]);\n});\n\nfn(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\nfn(&quot;a&quot;, &quot;b&quot;)(&quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\nfn(&quot;a&quot;)(&quot;b&quot;)(&quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\nfn(&quot;a&quot;)(&quot;b&quot;, &quot;c&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n</code></pre>\n<p>或许大家觉得这种方式更好理解，又能实现一样的效果，为什么不直接就讲这种呢？</p>\n<p>因为想给大家介绍各种实现的方法嘛，不能因为难以理解就不给大家介绍呐~</p>\n<h3>第三版</h3>\n<p>curry 函数写到这里其实已经很完善了，但是注意这个函数的传参顺序必须是从左到右，根据形参的顺序依次传入，如果我不想根据这个顺序传呢？</p>\n<p>我们可以创建一个占位符，比如这样：</p>\n<pre><code class=\"language-js\">var fn = curry(function(a, b, c) {\n    console.log([a, b, c]);\n});\n\nfn(&quot;a&quot;, _, &quot;c&quot;)(&quot;b&quot;) // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n</code></pre>\n<p>我们直接看第三版的代码：</p>\n<pre><code class=\"language-js\">// 第三版\nfunction curry(fn, args, holes) {\n    length = fn.length;\n\n    args = args || [];\n\n    holes = holes || [];\n\n    return function() {\n\n        var _args = args.slice(0),\n            _holes = holes.slice(0),\n            argsLen = args.length,\n            holesLen = holes.length,\n            arg, i, index = 0;\n\n        for (i = 0; i &lt; arguments.length; i++) {\n            arg = arguments[i];\n            // 处理类似 fn(1, _, _, 4)(_, 3) 这种情况，index 需要指向 holes 正确的下标\n            if (arg === _ &amp;&amp; holesLen) {\n                index++\n                if (index &gt; holesLen) {\n                    _args.push(arg);\n                    _holes.push(argsLen - 1 + index - holesLen)\n                }\n            }\n            // 处理类似 fn(1)(_) 这种情况\n            else if (arg === _) {\n                _args.push(arg);\n                _holes.push(argsLen + i);\n            }\n            // 处理类似 fn(_, 2)(1) 这种情况\n            else if (holesLen) {\n                // fn(_, 2)(_, 3)\n                if (index &gt;= holesLen) {\n                    _args.push(arg);\n                }\n                // fn(_, 2)(1) 用参数 1 替换占位符\n                else {\n                    _args.splice(_holes[index], 1, arg);\n                    _holes.splice(index, 1)\n                }\n            }\n            else {\n                _args.push(arg);\n            }\n\n        }\n        if (_holes.length || _args.length &lt; length) {\n            return curry.call(this, fn, _args, _holes);\n        }\n        else {\n            return fn.apply(this, _args);\n        }\n    }\n}\n\nvar _ = {};\n\nvar fn = curry(function(a, b, c, d, e) {\n    console.log([a, b, c, d, e]);\n});\n\n// 验证 输出全部都是 [1, 2, 3, 4, 5]\nfn(1, 2, 3, 4, 5);\nfn(_, 2, 3, 4, 5)(1);\nfn(1, _, 3, 4, 5)(2);\nfn(1, _, 3)(_, 4)(2)(5);\nfn(1, _, _, 4)(_, 3)(2)(5);\nfn(_, 2)(_, _, 4)(1)(3)(5)\n</code></pre>\n<h2>写在最后</h2>\n<p>至此，我们已经实现了一个强大的 curry 函数，可是这个 curry 函数符合柯里化的定义吗？柯里化可是将一个多参数的函数转换成多个单参数的函数，但是现在我们不仅可以传入一个参数，还可以一次传入两个参数，甚至更多参数……这看起来更像一个柯里化 (curry) 和偏函数 (partial application) 的综合应用，可是什么又是偏函数呢？下篇文章会讲到。</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}