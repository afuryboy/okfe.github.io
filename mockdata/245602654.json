{"code":0,"data":"<h2>前言</h2>\n<p>在开发中，我们经常会遇到在数组中查找指定元素的需求，可能大家觉得这个需求过于简单，然而如何优雅的去实现一个 findIndex 和 findLastIndex、indexOf 和 lastIndexOf 方法却是很少人去思考的。本文就带着大家一起参考着 underscore 去实现这些方法。</p>\n<p>在实现前，先看看 ES6 的 findIndex 方法，让大家了解 findIndex 的使用方法。</p>\n<h2>findIndex</h2>\n<p>ES6 对数组新增了 findIndex 方法，它会返回数组中满足提供的函数的第一个元素的索引，否则返回 -1。</p>\n<p>举个例子：</p>\n<pre><code class=\"language-js\">function isBigEnough(element) {\n  return element &gt;= 15;\n}\n\n[12, 5, 8, 130, 44].findIndex(isBigEnough);  // 3\n</code></pre>\n<p>findIndex 会找出第一个大于 15 的元素的下标，所以最后返回 3。</p>\n<p>是不是很简单，其实，我们自己去实现一个 findIndex 也很简单。</p>\n<h2>实现findIndex</h2>\n<p>思路自然很明了，遍历一遍，返回符合要求的值的下标即可。</p>\n<pre><code class=\"language-js\">function findIndex(array, predicate, context) {\n    for (var i = 0; i &lt; array.length; i++) {\n        if (predicate.call(context, array[i], i, array)) return i;\n    }\n    return -1;\n}\n\nconsole.log(findIndex([1, 2, 3, 4], function(item, i, array){\n    if (item == 3) return true;\n})) // 2\n</code></pre>\n<h2>findLastIndex</h2>\n<p>findIndex 是正序查找，但正如 indexOf 还有一个对应的 lastIndexOf 方法，我们也想写一个倒序查找的 findLastIndex 函数。实现自然也很简单，只要修改下循环即可。</p>\n<pre><code class=\"language-js\">function findLastIndex(array, predicate, context) {\n    var length = array.length;\n    for (var i = length - 1; i &gt;= 0; i--) {\n        if (predicate.call(context, array[i], i, array)) return i;\n    }\n    return -1;\n}\n\nconsole.log(findLastIndex([1, 2, 3, 4], function(item, index, array){\n    if (item == 1) return true;\n})) // 0\n</code></pre>\n<h2>createIndexFinder</h2>\n<p>然而问题在于，findIndex 和 findLastIndex 其实有很多重复的部分，如何精简冗余的内容呢？这便是我们要学习的地方，日后面试问到此类问题，也是加分的选项。</p>\n<p>underscore 的思路就是利用传参的不同，返回不同的函数。这个自然是简单，但是如何根据参数的不同，在同一个循环中，实现正序和倒序遍历呢？</p>\n<p>让我们直接模仿 underscore 的实现：</p>\n<pre><code class=\"language-js\">function createIndexFinder(dir) {\n    return function(array, predicate, context) {\n\n        var length = array.length;\n        var index = dir &gt; 0 ? 0 : length - 1;\n\n        for (; index &gt;= 0 &amp;&amp; index &lt; length; index += dir) {\n            if (predicate.call(context, array[index], index, array)) return index;\n        }\n\n        return -1;\n    }\n}\n\nvar findIndex = createIndexFinder(1);\nvar findLastIndex = createIndexFinder(-1);\n</code></pre>\n<h2>sortedIndex</h2>\n<p>findIndex 和 findLastIndex 的需求算是结束了，但是又来了一个新需求：在一个排好序的数组中找到 value 对应的位置，保证插入数组后，依然保持有序的状态。</p>\n<p>假设该函数命名为 sortedIndex，效果为：</p>\n<pre><code class=\"language-js\">sortedIndex([10, 20, 30], 25); // 2\n</code></pre>\n<p>也就是说如果，注意是如果，25 按照此下标插入数组后，数组变成 [10, 20, 25, 30]，数组依然是有序的状态。</p>\n<p>那么这个又该如何实现呢？</p>\n<p>既然是有序的数组，那我们就不需要遍历，大可以使用二分查找法，确定值的位置。让我们尝试着去写一版：</p>\n<pre><code class=\"language-js\">// 第一版\nfunction sortedIndex(array, obj) {\n\n    var low = 0, high = array.length;\n\n    while (low &lt; high) {\n        var mid = Math.floor((low + high) / 2);\n        if (array[mid] &lt; obj) low = mid + 1;\n        else high = mid;\n    }\n\n    return high;\n};\n\nconsole.log(sortedIndex([10, 20, 30, 40, 50], 35)) // 3\n</code></pre>\n<p>现在的方法虽然能用，但通用性不够，比如我们希望能处理这样的情况：</p>\n<pre><code class=\"language-js\">// stooges 配角 比如 三个臭皮匠 The Three Stooges\nvar stooges = [{name: 'stooge1', age: 10}, {name: 'stooge2', age: 30}];\n\nvar result = sortedIndex(stooges, {name: 'stooge3', age: 20}, function(stooge){\n    return stooge.age\n});\n\nconsole.log(result) // 1\n</code></pre>\n<p>所以我们还需要再加上一个参数 iteratee 函数对数组的每一个元素进行处理，一般这个时候，还会涉及到 this 指向的问题，所以我们再传一个 context 来让我们可以指定 this，那么这样一个函数又该如何写呢？</p>\n<pre><code class=\"language-js\">// 第二版\nfunction cb(func, context) {\n       if (context === void 0) return func;\n       return function() {\n           return func.apply(context, arguments);\n      };\n}\n\nfunction sortedIndex(array, obj, iteratee, context) {\n\n    iteratee = cb(iteratee, context)\n\n    var low = 0, high = array.length;\n    while (low &lt; high) {\n        var mid = Math.floor((low + high) / 2);\n        if (iteratee(array[mid]) &lt; iteratee(obj)) low = mid + 1;\n        else high = mid;\n    }\n    return high;\n};\n</code></pre>\n<h2>indexOf</h2>\n<p>sortedIndex 也完成了，现在我们尝试着去写一个 indexOf 和 lastIndexOf 函数，学习 findIndex 和 FindLastIndex 的方式，我们写一版：</p>\n<pre><code class=\"language-js\">// 第一版\nfunction createIndexOfFinder(dir) {\n    return function(array, item){\n        var length = array.length;\n        var index = dir &gt; 0 ? 0 : length - 1;\n        for (; index &gt;= 0 &amp;&amp; index &lt; length; index += dir) {\n            if (array[index] === item) return index;\n        }\n        return -1;\n    }\n}\n\nvar indexOf = createIndexOfFinder(1);\nvar lastIndexOf = createIndexOfFinder(-1);\n\nvar result = indexOf([1, 2, 3, 4, 5], 2);\n\nconsole.log(result) // 1\n</code></pre>\n<h2>fromIndex</h2>\n<p>但是即使是数组的 indexOf 方法也可以多传递一个参数 fromIndex，从 MDN 中看到 fromIndex 的讲究可有点多：</p>\n<blockquote>\n<p>设定开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回 -1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即 -1 表示从最后一个元素开始查找，-2 表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于 0，则整个数组都将会被查询。其默认值为 0。</p>\n</blockquote>\n<p>再看看 lastIndexOf 的 fromIndex：</p>\n<blockquote>\n<p>从此位置开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</p>\n</blockquote>\n<p>按照这么多的规则，我们尝试着去写第二版：</p>\n<pre><code class=\"language-js\">// 第二版\nfunction createIndexOfFinder(dir) {\n\n    return function(array, item, idx){\n        var length = array.length;\n        var i = 0;\n\n        if (typeof idx == &quot;number&quot;) {\n            if (dir &gt; 0) {\n                i = idx &gt;= 0 ? idx : Math.max(length + idx, 0);\n            }\n            else {\n                length = idx &gt;= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n            }\n        }\n\n        for (idx = dir &gt; 0 ? i : length - 1; idx &gt;= 0 &amp;&amp; idx &lt; length; idx += dir) {\n            if (array[idx] === item) return idx;\n        }\n        return -1;\n    }\n}\n\nvar indexOf = createIndexOfFinder(1);\nvar lastIndexOf = createIndexOfFinder(-1);\n</code></pre>\n<h2>优化</h2>\n<p>到此为止，已经很接近原生的 indexOf 函数了，但是 underscore 在此基础上还做了两点优化。</p>\n<p>第一个优化是支持查找 NaN。</p>\n<p>因为 NaN 不全等于 NaN，所以原生的 indexOf 并不能找出 NaN 的下标。</p>\n<pre><code class=\"language-js\">[1, NaN].indexOf(NaN) // -1\n</code></pre>\n<p>那么我们该如何实现这个功能呢？</p>\n<p>就是从数组中找到符合条件的值的下标嘛，不就是我们最一开始写的 findIndex 吗？</p>\n<p>我们来写一下：</p>\n<pre><code class=\"language-js\">// 第三版\nfunction createIndexOfFinder(dir, predicate) {\n\n    return function(array, item, idx){\n\n        if () { ... }\n\n        // 判断元素是否是 NaN\n        if (item !== item) {\n            // 在截取好的数组中查找第一个满足isNaN函数的元素的下标\n            idx = predicate(array.slice(i, length), isNaN)\n            return idx &gt;= 0 ? idx + i: -1;\n        }\n\n        for () { ... }\n    }\n}\n\nvar indexOf = createIndexOfFinder(1, findIndex);\nvar lastIndexOf = createIndexOfFinder(-1, findLastIndex);\n</code></pre>\n<p>第二个优化是支持对有序的数组进行更快的二分查找。</p>\n<p>如果 indexOf 第三个参数不传开始搜索的下标值，而是一个布尔值 true，就认为数组是一个排好序的数组，这时候，就会采用更快的二分法进行查找，这个时候，可以利用我们写的 sortedIndex 函数。</p>\n<p>在这里直接给最终的源码：</p>\n<pre><code class=\"language-js\">// 第四版\nfunction createIndexOfFinder(dir, predicate, sortedIndex) {\n\n    return function(array, item, idx){\n        var length = array.length;\n        var i = 0;\n\n        if (typeof idx == &quot;number&quot;) {\n            if (dir &gt; 0) {\n                i = idx &gt;= 0 ? idx : Math.max(length + idx, 0);\n            }\n            else {\n                length = idx &gt;= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n            }\n        }\n        else if (sortedIndex &amp;&amp; idx &amp;&amp; length) {\n            idx = sortedIndex(array, item);\n            // 如果该插入的位置的值正好等于元素的值，说明是第一个符合要求的值\n            return array[idx] === item ? idx : -1;\n        }\n\n        // 判断是否是 NaN\n        if (item !== item) {\n            idx = predicate(array.slice(i, length), isNaN)\n            return idx &gt;= 0 ? idx + i: -1;\n        }\n\n        for (idx = dir &gt; 0 ? i : length - 1; idx &gt;= 0 &amp;&amp; idx &lt; length; idx += dir) {\n            if (array[idx] === item) return idx;\n        }\n        return -1;\n    }\n}\n\nvar indexOf = createIndexOfFinder(1, findIndex, sortedIndex);\nvar lastIndexOf = createIndexOfFinder(-1, findLastIndex);\n</code></pre>\n<p>值得注意的是：在 underscore 的实现中，只有 indexOf 是支持有序数组使用二分查找，lastIndexOf 并不支持。</p>\n"}