{"code":0,"data":"<h2>前言</h2>\n<p>类型判断在 web 开发中有非常广泛的应用，简单的有判断数字还是字符串，进阶一点的有判断数组还是对象，再进阶一点的有判断日期、正则、错误类型，再再进阶一点还有比如判断 plainObject、空对象、Window 对象等等。</p>\n<p>以上都会讲，今天是上半场。</p>\n<h2>typeof</h2>\n<p>我们最最常用的莫过于 typeof，注意，尽管我们会看到诸如：</p>\n<pre><code class=\"language-js\">console.log(typeof('yayu')) // string\n</code></pre>\n<p>的写法，但是 typeof 可是一个正宗的运算符，就跟加减乘除一样！这就能解释为什么下面这种写法也是可行的：</p>\n<pre><code class=\"language-js\">console.log(typeof 'yayu') // string\n</code></pre>\n<p>引用《JavaScript权威指南》中对 typeof 的介绍：</p>\n<blockquote>\n<p>typeof 是一元操作符，放在其单个操作数的前面，操作数可以是任意类型。返回值为表示操作数类型的一个字符串。</p>\n</blockquote>\n<p>那我们都知道，在 ES6 前，JavaScript 共六种数据类型，分别是：</p>\n<p>Undefined、Null、Boolean、Number、String、Object</p>\n<p>然而当我们使用 typeof 对这些数据类型的值进行操作的时候，返回的结果却不是一一对应，分别是：</p>\n<p>undefined、object、boolean、number、string、object</p>\n<p>注意以上都是小写的字符串。Null 和 Object 类型都返回了 object 字符串。</p>\n<p>尽管不能一一对应，但是 typeof 却能检测出函数类型：</p>\n<pre><code class=\"language-js\">function a() {}\n\nconsole.log(typeof a); // function\n</code></pre>\n<p>所以 typeof 能检测出六种类型的值，但是，除此之外 Object 下还有很多细分的类型呐，如 Array、Function、Date、RegExp、Error 等。</p>\n<p>如果用 typeof 去检测这些类型，举个例子：</p>\n<pre><code class=\"language-js\">var date = new Date();\nvar error = new Error();\nconsole.log(typeof date); // object\nconsole.log(typeof error); // object\n</code></pre>\n<p>返回的都是 object 呐，这可怎么区分~ 所以有没有更好的方法呢？</p>\n<h2>Object.prototype.toString</h2>\n<p>是的，当然有！这就是 Object.prototype.toString！</p>\n<p>那 Object.protototype.toString 究竟是一个什么样的方法呢？</p>\n<p>为了更加细致的讲解这个函数，让我先献上 ES5 规范地址：<a href=\"https://es5.github.io/#x15.2.4.2\">https://es5.github.io/#x15.2.4.2</a>。</p>\n<p>在第 15.2.4.2 节讲的就是 Object.prototype.toString()，为了不误导大家，我先奉上英文版：</p>\n<blockquote>\n<p>When the toString method is called, the following steps are taken:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>If the <strong>this</strong> value is <strong>undefined</strong>, return &quot;<strong>[object Undefined]</strong>&quot;.</li>\n<li>If the <strong>this</strong> value is <strong>null</strong>, return &quot;<strong>[object Null]</strong>&quot;.</li>\n<li>Let <em>O</em> be the result of calling ToObject passing the <strong>this</strong> value as the argument.</li>\n<li>Let <em>class</em> be the value of the [[Class]] internal property of <em>O</em>.</li>\n<li>Return the String value that is the result of concatenating the three Strings &quot;<strong>[object</strong> &quot;, <em>class</em>, and &quot;<strong>]</strong>&quot;.</li>\n</ol>\n</blockquote>\n<p>凡是规范上加粗或者斜体的，在这里我也加粗或者斜体了，就是要让大家感受原汁原味的规范！</p>\n<p>如果没有看懂，就不妨看看我理解的：</p>\n<p>当 toString 方法被调用的时候，下面的步骤会被执行：</p>\n<ol>\n<li>如果 this 值是 undefined，就返回 [object Undefined]</li>\n<li>如果 this 的值是 null，就返回 [object Null]</li>\n<li>让 O 成为 ToObject(this) 的结果</li>\n<li>让 class 成为 O 的内部属性 [[Class]] 的值</li>\n<li>最后返回由 &quot;[object &quot; 和 class 和 &quot;]&quot; 三个部分组成的字符串</li>\n</ol>\n<p>通过规范，我们至少知道了调用 Object.prototype.toString 会返回一个由 &quot;[object &quot; 和 class 和 &quot;]&quot; 组成的字符串，而 class 是要判断的对象的内部属性。</p>\n<p>让我们写个 demo:</p>\n<pre><code class=\"language-js\">console.log(Object.prototype.toString.call(undefined)) // [object Undefined]\nconsole.log(Object.prototype.toString.call(null)) // [object Null]\n\nvar date = new Date();\nconsole.log(Object.prototype.toString.call(date)) // [object Date]\n</code></pre>\n<p>由此我们可以看到这个 class 值就是识别对象类型的关键！</p>\n<p>正是因为这种特性，我们可以用 Object.prototype.toString 方法识别出更多类型！</p>\n<p>那到底能识别多少种类型呢？</p>\n<p>至少 12 种！</p>\n<p>你咋知道的？</p>\n<p>我数的！</p>\n<p>……</p>\n<p>让我们看个 demo:</p>\n<pre><code class=\"language-js\">// 以下是11种：\nvar number = 1;          // [object Number]\nvar string = '123';      // [object String]\nvar boolean = true;      // [object Boolean]\nvar und = undefined;     // [object Undefined]\nvar nul = null;          // [object Null]\nvar obj = {a: 1}         // [object Object]\nvar array = [1, 2, 3];   // [object Array]\nvar date = new Date();   // [object Date]\nvar error = new Error(); // [object Error]\nvar reg = /a/g;          // [object RegExp]\nvar func = function a(){}; // [object Function]\n\nfunction checkType() {\n    for (var i = 0; i &lt; arguments.length; i++) {\n        console.log(Object.prototype.toString.call(arguments[i]))\n    }\n}\n\ncheckType(number, string, boolean, und, nul, obj, array, date, error, reg, func)\n\n</code></pre>\n<p>除了以上 11 种之外，还有：</p>\n<pre><code class=\"language-js\">console.log(Object.prototype.toString.call(Math)); // [object Math]\nconsole.log(Object.prototype.toString.call(JSON)); // [object JSON]\n</code></pre>\n<p>除了以上 13 种之外，还有：</p>\n<pre><code class=\"language-js\">function a() {\n    console.log(Object.prototype.toString.call(arguments)); // [object Arguments]\n}\na();\n</code></pre>\n<p>所以我们可以识别至少 14 种类型，当然我们也可以算出来，[[class]] 属性至少有 12 个。</p>\n<h2>type API</h2>\n<p>既然有了 Object.prototype.toString 这个神器！那就让我们写个 type 函数帮助我们以后识别各种类型的值吧！</p>\n<p>我的设想：</p>\n<p>写一个 type 函数能检测各种类型的值，如果是基本类型，就使用 typeof，引用类型就使用 toString。此外鉴于 typeof 的结果是小写，我也希望所有的结果都是小写。</p>\n<p>考虑到实际情况下并不会检测 Math 和 JSON，所以去掉这两个类型的检测。</p>\n<p>我们来写一版代码：</p>\n<pre><code class=\"language-js\">// 第一版\nvar class2type = {};\n\n// 生成class2type映射\n&quot;Boolean Number String Function Array Date RegExp Object Error Null Undefined&quot;.split(&quot; &quot;).map(function(item, index) {\n    class2type[&quot;[object &quot; + item + &quot;]&quot;] = item.toLowerCase();\n})\n\nfunction type(obj) {\n    return typeof obj === &quot;object&quot; || typeof obj === &quot;function&quot; ?\n        class2type[Object.prototype.toString.call(obj)] || &quot;object&quot; :\n        typeof obj;\n}\n</code></pre>\n<p>嗯，看起来很完美的样子~~ 但是注意，在 IE6 中，null 和 undefined 会被 Object.prototype.toString 识别成 [object Object]！</p>\n<p>我去，竟然还有这个兼容性！有什么简单的方法可以解决吗？那我们再改写一版，绝对让你惊艳！</p>\n<pre><code class=\"language-js\">// 第二版\nvar class2type = {};\n\n// 生成class2type映射\n&quot;Boolean Number String Function Array Date RegExp Object Error&quot;.split(&quot; &quot;).map(function(item, index) {\n    class2type[&quot;[object &quot; + item + &quot;]&quot;] = item.toLowerCase();\n})\n\nfunction type(obj) {\n    // 一箭双雕\n    if (obj == null) {\n        return obj + &quot;&quot;;\n    }\n    return typeof obj === &quot;object&quot; || typeof obj === &quot;function&quot; ?\n        class2type[Object.prototype.toString.call(obj)] || &quot;object&quot; :\n        typeof obj;\n}\n</code></pre>\n<h2>isFunction</h2>\n<p>有了 type 函数后，我们可以对常用的判断直接封装，比如 isFunction:</p>\n<pre><code class=\"language-js\">function isFunction(obj) {\n    return type(obj) === &quot;function&quot;;\n}\n</code></pre>\n<h2>数组</h2>\n<p>jQuery 判断数组类型，旧版本是通过判断 Array.isArray 方法是否存在，如果存在就使用该方法，不存在就使用 type 函数。</p>\n<pre><code class=\"language-js\">var isArray = Array.isArray || function( obj ) {\n    return type(obj) === &quot;array&quot;;\n}\n</code></pre>\n<p>但是在 jQuery v3.0 中已经完全采用了 Array.isArray。</p>\n<h2>结语</h2>\n<p>到此，类型判断的上篇就结束了，我们已经可以判断日期、正则、错误类型啦，但是还有更复杂的判断比如 plainObject、空对象、Window对象、类数组对象等，路漫漫其修远兮，吾将上下而求索。</p>\n<p>哦， 对了，这个 type 函数抄的 jQuery，<a href=\"https://github.com/jquery/jquery/blob/ac9e3016645078e1e42120822cfb2076151c8cbe/src/core.js#L269\">点击查看 type 源码</a>。</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}