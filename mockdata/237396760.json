{"code":0,"data":"<h2>前言</h2>\n<p>数组去重方法老生常谈，既然是常谈，我也来谈谈。</p>\n<h2>双层循环</h2>\n<p>也许我们首先想到的是使用 indexOf 来循环判断一遍，但在这个方法之前，让我们先看看最原始的方法：</p>\n<pre><code class=\"language-js\">var array = [1, 1, '1', '1'];\n\nfunction unique(array) {\n    // res用来存储结果\n    var res = [];\n    for (var i = 0, arrayLen = array.length; i &lt; arrayLen; i++) {\n        for (var j = 0, resLen = res.length; j &lt; resLen; j++ ) {\n            if (array[i] === res[j]) {\n                break;\n            }\n        }\n        // 如果array[i]是唯一的，那么执行完循环，j等于resLen\n        if (j === resLen) {\n            res.push(array[i])\n        }\n    }\n    return res;\n}\n\nconsole.log(unique(array)); // [1, &quot;1&quot;]\n</code></pre>\n<p>在这个方法中，我们使用循环嵌套，最外层循环 array，里面循环 res，如果 array[i] 的值跟 res[j] 的值相等，就跳出循环，如果都不等于，说明元素是唯一的，这时候 j 的值就会等于 res 的长度，根据这个特点进行判断，将值添加进 res。</p>\n<p>看起来很简单吧，之所以要讲一讲这个方法，是因为——————兼容性好！</p>\n<h2>indexOf</h2>\n<p>我们可以用 indexOf 简化内层的循环：</p>\n<pre><code class=\"language-js\">var array = [1, 1, '1'];\n\nfunction unique(array) {\n    var res = [];\n    for (var i = 0, len = array.length; i &lt; len; i++) {\n        var current = array[i];\n        if (res.indexOf(current) === -1) {\n            res.push(current)\n        }\n    }\n    return res;\n}\n\nconsole.log(unique(array));\n</code></pre>\n<h2>排序后去重</h2>\n<p>试想我们先将要去重的数组使用 sort 方法排序后，相同的值就会被排在一起，然后我们就可以只判断当前元素与上一个元素是否相同，相同就说明重复，不相同就添加进 res，让我们写个 demo：</p>\n<pre><code class=\"language-js\">var array = [1, 1, '1'];\n\nfunction unique(array) {\n    var res = [];\n    var sortedArray = array.concat().sort();\n    var seen;\n    for (var i = 0, len = sortedArray.length; i &lt; len; i++) {\n        // 如果是第一个元素或者相邻的元素不相同\n        if (!i || seen !== sortedArray[i]) {\n            res.push(sortedArray[i])\n        }\n        seen = sortedArray[i];\n    }\n    return res;\n}\n\nconsole.log(unique(array));\n</code></pre>\n<p>如果我们对一个已经排好序的数组去重，这种方法效率肯定高于使用 indexOf。</p>\n<h2>unique API</h2>\n<p>知道了这两种方法后，我们可以去尝试写一个名为 unique 的工具函数，我们根据一个参数 isSorted 判断传入的数组是否是已排序的，如果为 true，我们就判断相邻元素是否相同，如果为 false，我们就使用 indexOf 进行判断</p>\n<pre><code class=\"language-js\">var array1 = [1, 2, '1', 2, 1];\nvar array2 = [1, 1, '1', 2, 2];\n\n// 第一版\nfunction unique(array, isSorted) {\n    var res = [];\n    var seen = [];\n\n    for (var i = 0, len = array.length; i &lt; len; i++) {\n        var value = array[i];\n        if (isSorted) {\n            if (!i || seen !== value) {\n                res.push(value)\n            }\n            seen = value;\n        }\n        else if (res.indexOf(value) === -1) {\n            res.push(value);\n        }        \n    }\n    return res;\n}\n\nconsole.log(unique(array1)); // [1, 2, &quot;1&quot;]\nconsole.log(unique(array2, true)); // [1, &quot;1&quot;, 2]\n</code></pre>\n<h2>优化</h2>\n<p>尽管 unqique 已经可以试下去重功能，但是为了让这个 API 更加强大，我们来考虑一个需求：</p>\n<p>新需求：字母的大小写视为一致，比如'a'和'A'，保留一个就可以了！</p>\n<p>虽然我们可以先处理数组中的所有数据，比如将所有的字母转成小写，然后再传入unique函数，但是有没有方法可以省掉处理数组的这一遍循环，直接就在去重的循环中做呢？让我们去完成这个需求：</p>\n<pre><code class=\"language-js\">var array3 = [1, 1, 'a', 'A', 2, 2];\n\n// 第二版\n// iteratee 英文释义：迭代 重复\nfunction unique(array, isSorted, iteratee) {\n    var res = [];\n    var seen = [];\n\n    for (var i = 0, len = array.length; i &lt; len; i++) {\n        var value = array[i];\n        var computed = iteratee ? iteratee(value, i, array) : value;\n        if (isSorted) {\n            if (!i || seen !== computed) {\n                res.push(value)\n            }\n            seen = computed;\n        }\n        else if (iteratee) {\n            if (seen.indexOf(computed) === -1) {\n                seen.push(computed);\n                res.push(value);\n            }\n        }\n        else if (res.indexOf(value) === -1) {\n            res.push(value);\n        }        \n    }\n    return res;\n}\n\nconsole.log(unique(array3, false, function(item){\n    return typeof item == 'string' ? item.toLowerCase() : item\n})); // [1, &quot;a&quot;, 2]\n</code></pre>\n<p>在这一版也是最后一版的实现中，函数传递三个参数：</p>\n<p>array：表示要去重的数组，必填</p>\n<p>isSorted：表示函数传入的数组是否已排过序，如果为 true，将会采用更快的方法进行去重</p>\n<p>iteratee：传入一个函数，可以对每个元素进行重新的计算，然后根据处理的结果进行去重</p>\n<p>至此，我们已经仿照着 underscore 的思路写了一个 unique 函数，具体可以查看 <a href=\"https://github.com/jashkenas/underscore/blob/master/underscore.js#L562\">Github</a>。</p>\n<h2>filter</h2>\n<p>ES5 提供了 filter 方法，我们可以用来简化外层循环：</p>\n<p>比如使用 indexOf 的方法：</p>\n<pre><code class=\"language-js\">var array = [1, 2, 1, 1, '1'];\n\nfunction unique(array) {\n    var res = array.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    })\n    return res;\n}\n\nconsole.log(unique(array));\n</code></pre>\n<p>排序去重的方法：</p>\n<pre><code class=\"language-js\">var array = [1, 2, 1, 1, '1'];\n\nfunction unique(array) {\n    return array.concat().sort().filter(function(item, index, array){\n        return !index || item !== array[index - 1]\n    })\n}\n\nconsole.log(unique(array));\n</code></pre>\n<h2>Object 键值对</h2>\n<p>去重的方法众多，尽管我们已经跟着 underscore 写了一个 unqiue API，但是让我们看看其他的方法拓展下视野：</p>\n<p>这种方法是利用一个空的 Object 对象，我们把数组的值存成 Object 的 key 值，比如 Object[value1] = true，在判断另一个值的时候，如果 Object[value2]存在的话，就说明该值是重复的。示例代码如下：</p>\n<pre><code class=\"language-js\">var array = [1, 2, 1, 1, '1'];\n\nfunction unique(array) {\n    var obj = {};\n    return array.filter(function(item, index, array){\n        return obj.hasOwnProperty(item) ? false : (obj[item] = true)\n    })\n}\n\nconsole.log(unique(array)); // [1, 2]\n</code></pre>\n<p>我们可以发现，是有问题的，因为 1 和 '1' 是不同的，但是这种方法会判断为同一个值，这是因为对象的键值只能是字符串，所以我们可以使用 <code>typeof item + item</code> 拼成字符串作为 key 值来避免这个问题：</p>\n<pre><code class=\"language-js\">var array = [1, 2, 1, 1, '1'];\n\nfunction unique(array) {\n    var obj = {};\n    return array.filter(function(item, index, array){\n        return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true)\n    })\n}\n\nconsole.log(unique(array)); // [1, 2, &quot;1&quot;]\n</code></pre>\n<p>然而，即便如此，我们依然无法正确区分出两个对象，比如 {value: 1} 和 {value: 2}，因为 <code>typeof item + item</code> 的结果都会是 <code>object[object Object]</code>，不过我们可以使用 JSON.stringify 将对象序列化：</p>\n<pre><code class=\"language-js\">var array = [{value: 1}, {value: 1}, {value: 2}];\n\nfunction unique(array) {\n    var obj = {};\n    return array.filter(function(item, index, array){\n        console.log(typeof item + JSON.stringify(item))\n        return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)\n    })\n}\n\nconsole.log(unique(array)); // [{value: 1}, {value: 2}]\n</code></pre>\n<h2>ES6</h2>\n<p>随着 ES6 的到来，去重的方法又有了进展，比如我们可以使用 Set 和 Map 数据结构，以 Set 为例，ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>\n<p>是不是感觉就像是为去重而准备的？让我们来写一版：</p>\n<pre><code class=\"language-js\">var array = [1, 2, 1, 1, '1'];\n\nfunction unique(array) {\n   return Array.from(new Set(array));\n}\n\nconsole.log(unique(array)); // [1, 2, &quot;1&quot;]\n</code></pre>\n<p>甚至可以再简化下：</p>\n<pre><code class=\"language-js\">function unique(array) {\n    return [...new Set(array)];\n}\n</code></pre>\n<p>还可以再简化下：</p>\n<pre><code class=\"language-js\">var unique = (a) =&gt; [...new Set(a)]\n</code></pre>\n<p>此外，如果用 Map 的话：</p>\n<pre><code class=\"language-js\">function unique (arr) {\n    const seen = new Map()\n    return arr.filter((a) =&gt; !seen.has(a) &amp;&amp; seen.set(a, 1))\n}\n</code></pre>\n<h2>JavaScript 的进化</h2>\n<p>我们可以看到，去重方法从原始的 14 行代码到 ES6 的 1 行代码，其实也说明了 JavaScript 这门语言在不停的进步，相信以后的开发也会越来越高效。</p>\n<h2>特殊类型比较</h2>\n<p>去重的方法就到此结束了，然而要去重的元素类型可能是多种多样，除了例子中简单的 1 和 '1' 之外，其实还有 null、undefined、NaN、对象等，那么对于这些元素，之前的这些方法的去重结果又是怎样呢？</p>\n<p>在此之前，先让我们先看几个例子：</p>\n<pre><code class=\"language-js\">var str1 = '1';\nvar str2 = new String('1');\n\nconsole.log(str1 == str2); // true\nconsole.log(str1 === str2); // false\n\nconsole.log(null == null); // true\nconsole.log(null === null); // true\n\nconsole.log(undefined == undefined); // true\nconsole.log(undefined === undefined); // true\n\nconsole.log(NaN == NaN); // false\nconsole.log(NaN === NaN); // false\n\nconsole.log(/a/ == /a/); // false\nconsole.log(/a/ === /a/); // false\n\nconsole.log({} == {}); // false\nconsole.log({} === {}); // false\n</code></pre>\n<p>那么，对于这样一个数组</p>\n<pre><code class=\"language-js\">var array = [1, 1, '1', '1', null, null, undefined, undefined, new String('1'), new String('1'), /a/, /a/, NaN, NaN];\n</code></pre>\n<p>以上各种方法去重的结果到底是什么样的呢？</p>\n<p>我特地整理了一个列表，我们重点关注下对象和 NaN 的去重情况：</p>\n<p>&lt;table class=&quot;table table-bordered table-striped table-condensed&quot;&gt;<br>\n&lt;tr&gt;<br>\n&lt;th&gt;方法&lt;/th&gt;<br>\n&lt;th&gt;结果&lt;/th&gt;<br>\n&lt;th&gt;说明&lt;/th&gt;<br>\n&lt;/tr&gt;<br>\n&lt;tr&gt;<br>\n&lt;td&gt;for循环&lt;/td&gt;<br>\n&lt;td&gt;[1, &quot;1&quot;, null, undefined, String, String, /a/, /a/, NaN, NaN]&lt;/td&gt;\n&lt;td&gt;对象和 NaN 不去重&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;<br>\n&lt;td&gt;indexOf&lt;/td&gt;<br>\n&lt;td&gt;[1, &quot;1&quot;, null, undefined, String, String, /a/, /a/, NaN, NaN]&lt;/td&gt;\n&lt;td&gt;对象和 NaN 不去重&lt;/td&gt;\n&lt;/tr&gt;<br>\n&lt;tr&gt;<br>\n&lt;td&gt;sort&lt;/td&gt;<br>\n&lt;td&gt;[/a/, /a/, &quot;1&quot;, 1, String, 1, String, NaN, NaN, null, undefined]&lt;/td&gt;\n&lt;td&gt;对象和 NaN 不去重 数字 1 也不去重&lt;/td&gt;\n&lt;/tr&gt;<br>\n&lt;tr&gt;<br>\n&lt;td&gt;filter + indexOf&lt;/td&gt;<br>\n&lt;td&gt;[1, &quot;1&quot;, null, undefined, String, String, /a/, /a/]&lt;/td&gt;\n&lt;td&gt;对象不去重 NaN 会被忽略掉&lt;/td&gt;\n&lt;/tr&gt;<br>\n&lt;tr&gt;<br>\n&lt;td&gt;filter + sort&lt;/td&gt;<br>\n&lt;td&gt;[/a/, /a/, &quot;1&quot;, 1, String, 1, String, NaN, NaN, null, undefined]&lt;/td&gt;\n&lt;td&gt;对象和 NaN 不去重 数字 1 不去重&lt;/td&gt;\n&lt;/tr&gt;<br>\n&lt;tr&gt;<br>\n&lt;td&gt;优化后的键值对方法&lt;/td&gt;<br>\n&lt;td&gt;[1, &quot;1&quot;, null, undefined, String, /a/, NaN]&lt;/td&gt;\n&lt;td&gt;全部去重&lt;/td&gt;\n&lt;/tr&gt;<br>\n&lt;tr&gt;<br>\n&lt;td&gt;Set&lt;/td&gt;<br>\n&lt;td&gt;[1, &quot;1&quot;, null, undefined, String, String, /a/, /a/, NaN]&lt;/td&gt;\n&lt;td&gt;对象不去重 NaN 去重&lt;/td&gt;\n&lt;/tr&gt;<br>\n&lt;/table&gt;</p>\n<p>想了解为什么会出现以上的结果，看两个 demo 便能明白：</p>\n<pre><code class=\"language-js\">// demo1\nvar arr = [1, 2, NaN];\narr.indexOf(NaN); // -1\n</code></pre>\n<p>indexOf 底层还是使用 === 进行判断，因为 NaN === NaN的结果为 false，所以使用 indexOf 查找不到 NaN 元素</p>\n<pre><code class=\"language-js\">// demo2\nfunction unique(array) {\n   return Array.from(new Set(array));\n}\nconsole.log(unique([NaN, NaN])) // [NaN]\n</code></pre>\n<p>Set 认为尽管 NaN === NaN 为 false，但是这两个元素是重复的。</p>\n<h2>写在最后</h2>\n<p>虽然去重的结果有所不同，但更重要的是让我们知道在合适的场景要选择合适的方法。</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}