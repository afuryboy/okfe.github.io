{"code":0,"data":"<h2>前言</h2>\n<p>取出数组中的最大值或者最小值是开发中常见的需求，但你能想出几种方法来实现这个需求呢？</p>\n<h2>Math.max</h2>\n<p>JavaScript 提供了 Math.max 函数返回一组数中的最大值，用法是：</p>\n<pre><code class=\"language-js\">Math.max([value1[,value2, ...]])\n</code></pre>\n<p>值得注意的是：</p>\n<ol>\n<li>如果有任一参数不能被转换为数值，则结果为 NaN。</li>\n<li>max 是 Math 的静态方法，所以应该像这样使用：Math.max()，而不是作为 Math 实例的方法 (简单的来说，就是不使用 new )</li>\n<li>如果没有参数，则结果为 <code>-Infinity</code> (注意是负无穷大)</li>\n</ol>\n<p>而我们需要分析的是：</p>\n<p>1.如果任一参数不能被转换为数值，这就意味着如果参数可以被转换成数字，就是可以进行比较的，比如：</p>\n<pre><code class=\"language-js\">Math.max(true, 0) // 1\nMath.max(true, '2', null) // 2\nMath.max(1, undefined) // NaN\nMath.max(1, {}) // NaN\n</code></pre>\n<p>2.如果没有参数，则结果为 -Infinity，对应的，Math.min 函数，如果没有参数，则结果为 Infinity，所以：</p>\n<pre><code class=\"language-js\">var min = Math.min();\nvar max = Math.max();\nconsole.log(min &gt; max);\n</code></pre>\n<p>了解了 Math.max 方法，我们以求数组最大值的为例，思考有哪些方法可以实现这个需求。</p>\n<h2>原始方法</h2>\n<p>最最原始的方法，莫过于循环遍历一遍：</p>\n<pre><code class=\"language-js\">var arr = [6, 4, 1, 8, 2, 11, 23];\n\nvar result = arr[0];\nfor (var i = 1; i &lt; arr.length; i++) {\n    result =  Math.max(result, arr[i]);\n}\nconsole.log(result);\n</code></pre>\n<h2>reduce</h2>\n<p>既然是通过遍历数组求出一个最终值，那么我们就可以使用 reduce 方法：</p>\n<pre><code class=\"language-js\">var arr = [6, 4, 1, 8, 2, 11, 23];\n\nfunction max(prev, next) {\n    return Math.max(prev, next);\n}\nconsole.log(arr.reduce(max));\n</code></pre>\n<h2>排序</h2>\n<p>如果我们先对数组进行一次排序，那么最大值就是最后一个值：</p>\n<pre><code class=\"language-js\">var arr = [6, 4, 1, 8, 2, 11, 23];\n\narr.sort(function(a,b){return a - b;});\nconsole.log(arr[arr.length - 1])\n</code></pre>\n<h2>eval</h2>\n<p>Math.max 支持传多个参数来进行比较，那么我们如何将一个数组转换成参数传进 Math.max 函数呢？eval 便是一种</p>\n<pre><code class=\"language-js\">var arr = [6, 4, 1, 8, 2, 11, 23];\n\nvar max = eval(&quot;Math.max(&quot; + arr + &quot;)&quot;);\nconsole.log(max)\n</code></pre>\n<h2>apply</h2>\n<p>使用 apply 是另一种。</p>\n<pre><code class=\"language-js\">var arr = [6, 4, 1, 8, 2, 11, 23];\nconsole.log(Math.max.apply(null, arr))\n</code></pre>\n<h2>ES6 ...</h2>\n<p>使用 ES6 的扩展运算符：</p>\n<pre><code class=\"language-js\">var arr = [6, 4, 1, 8, 2, 11, 23];\nconsole.log(Math.max(...arr))\n</code></pre>\n<p>有更多的方法欢迎留言哈~</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}