{"code":0,"data":"<h2>作用域</h2>\n<p>作用域是指程序源代码中定义变量的区域。</p>\n<p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>\n<p>JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。</p>\n<h2>静态作用域与动态作用域</h2>\n<p>因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。</p>\n<p>而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p>\n<p>让我们认真看个例子就能明白之间的区别：</p>\n<pre><code class=\"language-js\">var value = 1;\n\nfunction foo() {\n    console.log(value);\n}\n\nfunction bar() {\n    var value = 2;\n    foo();\n}\n\nbar();\n\n// 结果是 ???\n</code></pre>\n<p>假设JavaScript采用静态作用域，让我们分析下执行过程：</p>\n<p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p>\n<p>假设JavaScript采用动态作用域，让我们分析下执行过程：</p>\n<p>执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。</p>\n<p>前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。</p>\n<h2>动态作用域</h2>\n<p>也许你会好奇什么语言是动态作用域？</p>\n<p>bash 就是动态作用域，不信的话，把下面的脚本存成例如 scope.bash，然后进入相应的目录，用命令行执行 <code>bash ./scope.bash</code>，看看打印的值是多少。</p>\n<pre><code class=\"language-bash\">value=1\nfunction foo () {\n    echo $value;\n}\nfunction bar () {\n    local value=2;\n    foo;\n}\nbar\n</code></pre>\n<p>这个文件也可以在 <a href=\"https://github.com/mqyqingfeng/Blog/blob/master/demos/scope/scope.bash\">Github 博客仓库</a>中找到。</p>\n<h2>思考题</h2>\n<p>最后，让我们看一个《JavaScript权威指南》中的例子：</p>\n<pre><code class=\"language-js\">var scope = &quot;global scope&quot;;\nfunction checkscope(){\n    var scope = &quot;local scope&quot;;\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope();\n</code></pre>\n<pre><code class=\"language-js\">var scope = &quot;global scope&quot;;\nfunction checkscope(){\n    var scope = &quot;local scope&quot;;\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()();\n</code></pre>\n<p>猜猜两段代码各自的执行结果是多少？</p>\n<p>这里直接告诉大家结果，两段代码都会打印：<code>local scope</code>。</p>\n<p>原因也很简单，因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。</p>\n<p>而引用《JavaScript权威指南》的回答就是：</p>\n<p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p>\n<p>但是在这里真正想让大家思考的是：</p>\n<p>虽然两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？</p>\n<p>如果要回答这个问题，就要牵涉到很多的内容，词法作用域只是其中的一小部分，让我们期待下一篇文章————《JavaScript深入之执行上下文栈》。</p>\n<h2>下一篇文章</h2>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/4\">JavaScript深入之执行上下文栈</a></p>\n<h2>深入系列</h2>\n<p>JavaScript深入系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>\n"}