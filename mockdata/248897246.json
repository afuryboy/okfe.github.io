{"code":0,"data":"<h2>前言</h2>\n<p>虽然标题写的是如何判断两个对象相等，但本篇我们不仅仅判断两个对象相等，实际上，我们要做到的是如何判断两个参数相等，而这必然会涉及到多种类型的判断。</p>\n<h2>相等</h2>\n<p>什么是相等？在<a href=\"https://github.com/mqyqingfeng/Blog/issues/27\">《JavaScript专题之去重》</a>中，我们认为只要 <code>===</code> 的结果为 true，两者就相等，然而今天我们重新定义相等：</p>\n<p>我们认为：</p>\n<ol>\n<li>NaN 和 NaN 是相等</li>\n<li>[1] 和 [1] 是相等</li>\n<li>{value: 1} 和 {value: 1} 是相等</li>\n</ol>\n<p>不仅仅是这些长得一样的，还有</p>\n<ol>\n<li>1 和 new Number(1) 是相等</li>\n<li>'Curly' 和 new String('Curly') 是相等</li>\n<li>true 和 new Boolean(true) 是相等</li>\n</ol>\n<p>更复杂的我们会在接下来的内容中看到。</p>\n<h2>目标</h2>\n<p>我们的目标是写一个 eq 函数用来判断两个参数是否相等，使用效果如下：</p>\n<pre><code class=\"language-js\">function eq(a, b) { ... }\n\nvar a = [1];\nvar b = [1];\nconsole.log(eq(a, b)) // true\n</code></pre>\n<p>在写这个看似很简单的函数之前，我们首先了解在一些简单的情况下是如何判断的？</p>\n<h2>+0 与 -0</h2>\n<p>如果 a === b 的结果为 true， 那么 a 和 b 就是相等的吗？一般情况下，当然是这样的，但是有一个特殊的例子，就是 +0 和 -0。</p>\n<p>JavaScript “处心积虑”的想抹平两者的差异：</p>\n<pre><code class=\"language-js\">// 表现1\nconsole.log(+0 === -0); // true\n\n// 表现2\n(-0).toString() // '0'\n(+0).toString() // '0'\n\n// 表现3\n-0 &lt; +0 // false\n+0 &lt; -0 // false\n</code></pre>\n<p>即便如此，两者依然是不同的：</p>\n<pre><code class=\"language-js\">1 / +0 // Infinity\n1 / -0 // -Infinity\n\n1 / +0 === 1 / -0 // false\n</code></pre>\n<p>也许你会好奇为什么要有 +0 和 -0 呢？</p>\n<p>这是因为 JavaScript 采用了IEEE_754 浮点数表示法(几乎所有现代编程语言所采用)，这是一种二进制表示法，按照这个标准，最高位是符号位(0 代表正，1 代表负)，剩下的用于表示大小。而对于零这个边界值 ，1000(-0) 和 0000(0)都是表示 0 ，这才有了正负零的区别。</p>\n<p>也许你会好奇什么时候会产生 -0 呢？</p>\n<pre><code class=\"language-js\">Math.round(-0.1) // -0\n</code></pre>\n<p>那么我们又该如何在 === 结果为 true 的时候，区别 0 和 -0 得出正确的结果呢？我们可以这样做：</p>\n<pre><code class=\"language-js\">function eq(a, b){\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    return false;\n}\n\nconsole.log(eq(0, 0)) // true\nconsole.log(eq(0, -0)) // false\n</code></pre>\n<h2>NaN</h2>\n<p>在本篇，我们认为 NaN 和 NaN 是相等的，那又该如何判断出 NaN 呢？</p>\n<pre><code class=\"language-js\">console.log(NaN === NaN); // false\n</code></pre>\n<p>利用 NaN 不等于自身的特性，我们可以区别出 NaN，那么这个 eq 函数又该怎么写呢？</p>\n<pre><code class=\"language-js\">function eq(a, b) {\n    if (a !== a) return b !== b;\n}\n\nconsole.log(eq(NaN, NaN)); // true\n</code></pre>\n<h2>eq 函数</h2>\n<p>现在，我们已经可以去写 eq 函数的第一版了。</p>\n<pre><code class=\"language-js\">// eq 第一版\n// 用来过滤掉简单的类型比较，复杂的对象使用 deepEq 函数进行处理\nfunction eq(a, b) {\n\n    // === 结果为 true 的区别出 +0 和 -0\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n\n    // typeof null 的结果为 object ，这里做判断，是为了让有 null 的情况尽早退出函数\n    if (a == null || b == null) return false;\n\n    // 判断 NaN\n    if (a !== a) return b !== b;\n\n    // 判断参数 a 类型，如果是基本类型，在这里可以直接返回 false\n    var type = typeof a;\n    if (type !== 'function' &amp;&amp; type !== 'object' &amp;&amp; typeof b != 'object') return false;\n\n    // 更复杂的对象使用 deepEq 函数进行深度比较\n    return deepEq(a, b);\n};\n</code></pre>\n<p>也许你会好奇是不是少了一个 <code>typeof b !== function</code>?</p>\n<p>试想如果我们添加上了这句，当 a 是基本类型，而 b 是函数的时候，就会进入 deepEq 函数，而去掉这一句，就会进入直接进入 false，实际上 基本类型和函数肯定是不会相等的，所以这样做代码又少，又可以让一种情况更早退出。</p>\n<h2>String 对象</h2>\n<p>现在我们开始写 deepEq 函数，一个要处理的重大难题就是 'Curly' 和 new String('Curly') 如何判断成相等？</p>\n<p>两者的类型都不一样呐！不信我们看 typeof 的操作结果：</p>\n<pre><code class=\"language-js\">console.log(typeof 'Curly'); // string\nconsole.log(typeof new String('Curly')); // object\n</code></pre>\n<p>可是我们在<a href=\"https://github.com/mqyqingfeng/Blog/issues/28\">《JavaScript专题之类型判断上》</a>中还学习过更多的方法判断类型，比如 Object.prototype.toString：</p>\n<pre><code class=\"language-js\">var toString = Object.prototype.toString;\ntoString.call('Curly'); // &quot;[object String]&quot;\ntoString.call(new String('Curly')); // &quot;[object String]&quot;\n</code></pre>\n<p>神奇的是使用 toString 方法两者判断的结果却是一致的，可是就算知道了这一点，还是不知道如何判断字符串和字符串包装对象是相等的呢？</p>\n<p>那我们利用隐式类型转换呢？</p>\n<pre><code class=\"language-js\">console.log('Curly' + '' === new String('Curly') + ''); // true\n</code></pre>\n<p>看来我们已经有了思路：如果 a 和 b 的 Object.prototype.toString的结果一致，并且都是&quot;[object String]&quot;，那我们就使用 '' + a === '' + b 进行判断。</p>\n<p>可是不止有 String 对象呐，Boolean、Number、RegExp、Date呢？</p>\n<h2>更多对象</h2>\n<p>跟 String 同样的思路，利用隐式类型转换。</p>\n<p><strong>Boolean</strong></p>\n<pre><code class=\"language-js\">var a = true;\nvar b = new Boolean(true);\n\nconsole.log(+a === +b) // true\n</code></pre>\n<p><strong>Date</strong></p>\n<pre><code class=\"language-js\">var a = new Date(2009, 9, 25);\nvar b = new Date(2009, 9, 25);\n\nconsole.log(+a === +b) // true\n</code></pre>\n<p><strong>RegExp</strong></p>\n<pre><code class=\"language-js\">var a = /a/i;\nvar b = new RegExp(/a/i);\n\nconsole.log('' + a === '' + b) // true\n</code></pre>\n<p><strong>Number</strong></p>\n<pre><code class=\"language-js\">var a = 1;\nvar b = new Number(1);\n\nconsole.log(+a === +b) // true\n</code></pre>\n<p>嗯哼？你确定 Number 能这么简单的判断？</p>\n<pre><code class=\"language-js\">var a = Number(NaN);\nvar b = Number(NaN);\n\nconsole.log(+a === +b); // false\n</code></pre>\n<p>可是 a 和 b 应该被判断成 true 的呐~</p>\n<p>那么我们就改成这样：</p>\n<pre><code class=\"language-js\">var a = Number(NaN);\nvar b = Number(NaN);\n\nfunction eq() {\n    // 判断 Number(NaN) Object(NaN) 等情况\n    if (+a !== +a) return +b !== +b;\n    // 其他判断 ...\n}\n\nconsole.log(eq(a, b)); // true\n</code></pre>\n<h2>deepEq 函数</h2>\n<p>现在我们可以写一点 deepEq 函数了。</p>\n<pre><code class=\"language-js\">var toString = Object.prototype.toString;\n\nfunction deepEq(a, b) {\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n\n    switch (className) {\n        case '[object RegExp]':\n        case '[object String]':\n            return '' + a === '' + b;\n        case '[object Number]':\n            if (+a !== +a) return +b !== +b;\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n            return +a === +b;\n    }\n\n    // 其他判断\n}\n</code></pre>\n<h2>构造函数实例</h2>\n<p>我们看个例子：</p>\n<pre><code class=\"language-js\">function Person() {\n    this.name = name;\n}\n\nfunction Animal() {\n    this.name = name\n}\n\nvar person = new Person('Kevin');\nvar animal = new Animal('Kevin');\n\neq(person, animal) // ???\n</code></pre>\n<p>虽然 <code>person</code> 和 <code>animal</code> 都是 <code>{name: 'Kevin'}</code>，但是 <code>person</code> 和 <code>animal</code> 属于不同构造函数的实例，为了做出区分，我们认为是不同的对象。</p>\n<p>如果两个对象所属的构造函数对象不同，两个对象就一定不相等吗？</p>\n<p>并不一定，我们再举个例子：</p>\n<pre><code class=\"language-js\">var attrs = Object.create(null);\nattrs.name = &quot;Bob&quot;;\neq(attrs, {name: &quot;Bob&quot;}); // ???\n</code></pre>\n<p>尽管 <code>attrs</code> 没有原型，<code>{name: &quot;Bob&quot;}</code> 的构造函数是 <code>Object</code>，但是在实际应用中，只要他们有着相同的键值对，我们依然认为是相等。</p>\n<p>从函数设计的角度来看，我们不应该让他们相等，但是从实践的角度，我们让他们相等，所以相等就是一件如此随意的事情吗？！对啊，我也在想：undersocre，你怎么能如此随意呢！！！</p>\n<p>哎，吐槽完了，我们还是要接着写这个相等函数，我们可以先做个判断，对于不同构造函数下的实例直接返回 false。</p>\n<pre><code class=\"language-js\">function isFunction(obj) {\n    return toString.call(obj) === '[object Function]'\n}\n\nfunction deepEq(a, b) {\n    // 接着上面的内容\n    var areArrays = className === '[object Array]';\n    // 不是数组\n    if (!areArrays) {\n        // 过滤掉两个函数的情况\n        if (typeof a != 'object' || typeof b != 'object') return false;\n\n        var aCtor = a.constructor, bCtor = b.constructor;\n        // aCtor 和 bCtor 必须都存在并且都不是 Object 构造函数的情况下，aCtor 不等于 bCtor， 那这两个对象就真的不相等啦\n        if (aCtor !== bCtor &amp;&amp; !(isFunction(aCtor) &amp;&amp; aCtor instanceof aCtor &amp;&amp; isFunction(bCtor) &amp;&amp; bCtor instanceof bCtor) &amp;&amp; ('constructor' in a &amp;&amp; 'constructor' in b)) {\n            return false;\n        }\n    }\n\n    // 下面还有好多判断\n}\n</code></pre>\n<h2>数组相等</h2>\n<p>现在终于可以进入我们期待已久的数组和对象的判断，不过其实这个很简单，就是递归遍历一遍……</p>\n<pre><code class=\"language-js\">function deepEq(a, b) {\n    // 再接着上面的内容\n    if (areArrays) {\n\n        length = a.length;\n        if (length !== b.length) return false;\n\n        while (length--) {\n            if (!eq(a[length], b[length])) return false;\n         }\n    } \n    else {\n\n        var keys = Object.keys(a), key;\n        length = keys.length;\n\n        if (Object.keys(b).length !== length) return false;\n\n        while (length--) {\n            key = keys[length];\n            if (!(b.hasOwnProperty(key) &amp;&amp; eq(a[key], b[key]))) return false;\n        }\n    }\n    return true;\n\n}\n</code></pre>\n<h2>循环引用</h2>\n<p>如果觉得这就结束了，简直是太天真，因为最难的部分才终于要开始，这个问题就是循环引用！</p>\n<p>举个简单的例子：</p>\n<pre><code class=\"language-js\">a = {abc: null};\nb = {abc: null};\na.abc = a;\nb.abc = b;\n\neq(a, b)\n</code></pre>\n<p>再复杂一点的，比如：</p>\n<pre><code class=\"language-js\">a = {foo: {b: {foo: {c: {foo: null}}}}};\nb = {foo: {b: {foo: {c: {foo: null}}}}};\na.foo.b.foo.c.foo = a;\nb.foo.b.foo.c.foo = b;\n\neq(a, b)\n</code></pre>\n<p>为了给大家演示下循环引用，大家可以把下面这段已经精简过的代码复制到浏览器中尝试：</p>\n<pre><code class=\"language-js\">// demo\nvar a, b;\n\na = { foo: { b: { foo: { c: { foo: null } } } } };\nb = { foo: { b: { foo: { c: { foo: null } } } } };\na.foo.b.foo.c.foo = a;\nb.foo.b.foo.c.foo = b;\n\nfunction eq(a, b, aStack, bStack) {\n    if (typeof a == 'number') {\n        return a === b;\n    }\n\n    return deepEq(a, b)\n}\n\nfunction deepEq(a, b) {\n\n    var keys = Object.keys(a);\n    var length = keys.length;\n    var key;\n\n    while (length--) {\n        key = keys[length]\n\n        // 这是为了让你看到代码其实一直在执行\n        console.log(a[key], b[key])\n\n        if (!eq(a[key], b[key])) return false;\n    }\n\n    return true;\n\n}\n\neq(a, b)\n</code></pre>\n<p>嗯，以上的代码是死循环。</p>\n<p>那么，我们又该如何解决这个问题呢？underscore 的思路是 eq 的时候，多传递两个参数为 aStack 和 bStack，用来储存 a 和 b 递归比较过程中的 a 和 b 的值，咋说的这么绕口呢？\n我们直接看个精简的例子：</p>\n<pre><code class=\"language-js\">var a, b;\n\na = { foo: { b: { foo: { c: { foo: null } } } } };\nb = { foo: { b: { foo: { c: { foo: null } } } } };\na.foo.b.foo.c.foo = a;\nb.foo.b.foo.c.foo = b;\n\nfunction eq(a, b, aStack, bStack) {\n    if (typeof a == 'number') {\n        return a === b;\n    }\n\n    return deepEq(a, b, aStack, bStack)\n}\n\nfunction deepEq(a, b, aStack, bStack) {\n\n    aStack = aStack || [];\n    bStack = bStack || [];\n\n    var length = aStack.length;\n\n    while (length--) {\n        if (aStack[length] === a) {\n              return bStack[length] === b;\n        }\n    }\n\n    aStack.push(a);\n    bStack.push(b);\n\n    var keys = Object.keys(a);\n    var length = keys.length;\n    var key;\n\n    while (length--) {\n        key = keys[length]\n\n        console.log(a[key], b[key], aStack, bStack)\n\n        if (!eq(a[key], b[key], aStack, bStack)) return false;\n    }\n\n    // aStack.pop();\n    // bStack.pop();\n    return true;\n\n}\n\nconsole.log(eq(a, b))\n</code></pre>\n<p>之所以注释掉 <code>aStack.pop()</code>和<code>bStack.pop()</code>这两句，是为了方便大家查看 aStack bStack的值。</p>\n<h2>最终的 eq 函数</h2>\n<p>最终的代码如下：</p>\n<pre><code class=\"language-js\">var toString = Object.prototype.toString;\n\nfunction isFunction(obj) {\n    return toString.call(obj) === '[object Function]'\n}\n\nfunction eq(a, b, aStack, bStack) {\n\n    // === 结果为 true 的区别出 +0 和 -0\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n\n    // typeof null 的结果为 object ，这里做判断，是为了让有 null 的情况尽早退出函数\n    if (a == null || b == null) return false;\n\n    // 判断 NaN\n    if (a !== a) return b !== b;\n\n    // 判断参数 a 类型，如果是基本类型，在这里可以直接返回 false\n    var type = typeof a;\n    if (type !== 'function' &amp;&amp; type !== 'object' &amp;&amp; typeof b != 'object') return false;\n\n    // 更复杂的对象使用 deepEq 函数进行深度比较\n    return deepEq(a, b, aStack, bStack);\n};\n\nfunction deepEq(a, b, aStack, bStack) {\n\n    // a 和 b 的内部属性 [[class]] 相同时 返回 true\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n\n    switch (className) {\n        case '[object RegExp]':\n        case '[object String]':\n            return '' + a === '' + b;\n        case '[object Number]':\n            if (+a !== +a) return +b !== +b;\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n        case '[object Date]':\n        case '[object Boolean]':\n            return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    // 不是数组\n    if (!areArrays) {\n        // 过滤掉两个函数的情况\n        if (typeof a != 'object' || typeof b != 'object') return false;\n\n        var aCtor = a.constructor,\n            bCtor = b.constructor;\n        // aCtor 和 bCtor 必须都存在并且都不是 Object 构造函数的情况下，aCtor 不等于 bCtor， 那这两个对象就真的不相等啦\n        if (aCtor !== bCtor &amp;&amp; !(isFunction(aCtor) &amp;&amp; aCtor instanceof aCtor &amp;&amp; isFunction(bCtor) &amp;&amp; bCtor instanceof bCtor) &amp;&amp; ('constructor' in a &amp;&amp; 'constructor' in b)) {\n            return false;\n        }\n    }\n\n\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n\n    // 检查是否有循环引用的部分\n    while (length--) {\n        if (aStack[length] === a) {\n            return bStack[length] === b;\n        }\n    }\n\n    aStack.push(a);\n    bStack.push(b);\n\n    // 数组判断\n    if (areArrays) {\n\n        length = a.length;\n        if (length !== b.length) return false;\n\n        while (length--) {\n            if (!eq(a[length], b[length], aStack, bStack)) return false;\n        }\n    }\n    // 对象判断\n    else {\n\n        var keys = Object.keys(a),\n            key;\n        length = keys.length;\n\n        if (Object.keys(b).length !== length) return false;\n        while (length--) {\n\n            key = keys[length];\n            if (!(b.hasOwnProperty(key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) return false;\n        }\n    }\n\n    aStack.pop();\n    bStack.pop();\n    return true;\n\n}\n\nconsole.log(eq(0, 0)) // true\nconsole.log(eq(0, -0)) // false\n\nconsole.log(eq(NaN, NaN)); // true\nconsole.log(eq(Number(NaN), Number(NaN))); // true\n\nconsole.log(eq('Curly', new String('Curly'))); // true\n\nconsole.log(eq([1], [1])); // true\nconsole.log(eq({ value: 1 }, { value: 1 })); // true\n\nvar a, b;\n\na = { foo: { b: { foo: { c: { foo: null } } } } };\nb = { foo: { b: { foo: { c: { foo: null } } } } };\na.foo.b.foo.c.foo = a;\nb.foo.b.foo.c.foo = b;\n\nconsole.log(eq(a, b)) // true\n</code></pre>\n<p>真让人感叹一句：eq 不愧是 underscore 中实现代码行数最多的函数了！</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}