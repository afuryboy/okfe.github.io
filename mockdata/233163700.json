{"code":0,"data":"<h2>前言</h2>\n<p>在前端开发中会遇到一些频繁的事件触发，比如：</p>\n<ol>\n<li>window 的 resize、scroll</li>\n<li>mousedown、mousemove</li>\n<li>keyup、keydown\n……</li>\n</ol>\n<p>为此，我们举个示例代码来了解事件如何频繁的触发：</p>\n<p>我们写个 <code>index.html</code> 文件：</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=edge, chrome=1&quot;&gt;\n    &lt;title&gt;debounce&lt;/title&gt;\n    &lt;style&gt;\n        #container{\n            width: 100%; height: 200px; line-height: 200px; text-align: center; color: #fff; background-color: #444; font-size: 30px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;debounce.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p><code>debounce.js</code> 文件的代码如下：</p>\n<pre><code class=\"language-js\">var count = 1;\nvar container = document.getElementById('container');\n\nfunction getUserAction() {\n    container.innerHTML = count++;\n};\n\ncontainer.onmousemove = getUserAction;\n</code></pre>\n<p>我们来看看效果：</p>\n<p><img src=\"https://github.com/mqyqingfeng/Blog/raw/master/Images/debounce/debounce.gif\" alt=\"debounce\"></p>\n<p>从左边滑到右边就触发了 165 次 getUserAction 函数！</p>\n<p>因为这个例子很简单，所以浏览器完全反应的过来，可是如果是复杂的回调函数或是 ajax 请求呢？假设 1 秒触发了 60 次，每个回调就必须在 1000 / 60 = 16.67ms 内完成，否则就会有卡顿出现。</p>\n<p>为了解决这个问题，一般有两种解决方案：</p>\n<ol>\n<li>debounce 防抖</li>\n<li>throttle 节流</li>\n</ol>\n<h2>防抖</h2>\n<p>今天重点讲讲防抖的实现。</p>\n<p>防抖的原理就是：你尽管触发事件，但是我一定在事件触发 n 秒后才执行，如果你在一个事件触发的 n 秒内又触发了这个事件，那我就以新的事件的时间为准，n 秒后才执行，总之，就是要等你触发完事件 n 秒内不再触发事件，我才执行，真是任性呐!</p>\n<h2>第一版</h2>\n<p>根据这段表述，我们可以写第一版的代码：</p>\n<pre><code class=\"language-js\">// 第一版\nfunction debounce(func, wait) {\n    var timeout;\n    return function () {\n        clearTimeout(timeout)\n        timeout = setTimeout(func, wait);\n    }\n}\n</code></pre>\n<p>如果我们要使用它，以最一开始的例子为例：</p>\n<pre><code class=\"language-js\">container.onmousemove = debounce(getUserAction, 1000);\n</code></pre>\n<p>现在随你怎么移动，反正你移动完 1000ms 内不再触发，我才执行事件。看看使用效果：</p>\n<p><img src=\"https://github.com/mqyqingfeng/Blog/raw/master/Images/debounce/debounce-1.gif\" alt=\"debounce 第一版\"></p>\n<p>顿时就从 165 次降低成了 1 次!</p>\n<p>棒棒哒，我们接着完善它。</p>\n<h2>this</h2>\n<p>如果我们在 <code>getUserAction</code> 函数中 <code>console.log(this)</code>，在不使用 <code>debounce</code> 函数的时候，<code>this</code> 的值为：</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>但是如果使用我们的 debounce 函数，this 就会指向 Window 对象！</p>\n<p>所以我们需要将 this 指向正确的对象。</p>\n<p>我们修改下代码：</p>\n<pre><code class=\"language-js\">// 第二版\nfunction debounce(func, wait) {\n    var timeout;\n\n    return function () {\n        var context = this;\n\n        clearTimeout(timeout)\n        timeout = setTimeout(function(){\n            func.apply(context)\n        }, wait);\n    }\n}\n</code></pre>\n<p>现在 this 已经可以正确指向了。让我们看下个问题：</p>\n<h2>event 对象</h2>\n<p>JavaScript 在事件处理函数中会提供事件对象 event，我们修改下 getUserAction 函数：</p>\n<pre><code class=\"language-js\">function getUserAction(e) {\n    console.log(e);\n    container.innerHTML = count++;\n};\n</code></pre>\n<p>如果我们不使用 debouce 函数，这里会打印 MouseEvent 对象，如图所示：</p>\n<p><img src=\"https://github.com/mqyqingfeng/Blog/raw/master/Images/debounce/event.png\" alt=\"MouseEvent\"></p>\n<p>但是在我们实现的 debounce 函数中，却只会打印 undefined!</p>\n<p>所以我们再修改一下代码：</p>\n<pre><code class=\"language-js\">// 第三版\nfunction debounce(func, wait) {\n    var timeout;\n\n    return function () {\n        var context = this;\n        var args = arguments;\n\n        clearTimeout(timeout)\n        timeout = setTimeout(function(){\n            func.apply(context, args)\n        }, wait);\n    }\n}\n</code></pre>\n<p>到此为止，我们修复了两个小问题：</p>\n<ol>\n<li>this 指向</li>\n<li>event 对象</li>\n</ol>\n<h2>立刻执行</h2>\n<p>这个时候，代码已经很是完善了，但是为了让这个函数更加完善，我们接下来思考一个新的需求。</p>\n<p>这个需求就是：</p>\n<p>我不希望非要等到事件停止触发后才执行，我希望立刻执行函数，然后等到停止触发 n 秒后，才可以重新触发执行。</p>\n<p>想想这个需求也是很有道理的嘛，那我们加个 immediate 参数判断是否是立刻执行。</p>\n<pre><code class=\"language-js\">// 第四版\nfunction debounce(func, wait, immediate) {\n\n    var timeout;\n\n    return function () {\n        var context = this;\n        var args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            // 如果已经执行过，不再执行\n            var callNow = !timeout;\n            timeout = setTimeout(function(){\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n</code></pre>\n<p>再来看看使用效果：</p>\n<p><img src=\"https://github.com/mqyqingfeng/Blog/raw/master/Images/debounce/debounce-4.gif\" alt=\"debounce 第四版\"></p>\n<h2>返回值</h2>\n<p>此时注意一点，就是 getUserAction 函数可能是有返回值的，所以我们也要返回函数的执行结果，但是当 immediate 为 false 的时候，因为使用了 setTimeout ，我们将 func.apply(context, args) 的返回值赋给变量，最后再 return 的时候，值将会一直是 undefined，所以我们只在 immediate 为 true 的时候返回函数的执行结果。</p>\n<pre><code class=\"language-js\">// 第五版\nfunction debounce(func, wait, immediate) {\n\n    var timeout, result;\n\n    return function () {\n        var context = this;\n        var args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            // 如果已经执行过，不再执行\n            var callNow = !timeout;\n            timeout = setTimeout(function(){\n                timeout = null;\n            }, wait)\n            if (callNow) result = func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n        return result;\n    }\n}\n</code></pre>\n<h2>取消</h2>\n<p>最后我们再思考一个小需求，我希望能取消 debounce 函数，比如说我 debounce 的时间间隔是 10 秒钟，immediate 为 true，这样的话，我只有等 10 秒后才能重新触发事件，现在我希望有一个按钮，点击后，取消防抖，这样我再去触发，就可以又立刻执行啦，是不是很开心？</p>\n<p>为了这个需求，我们写最后一版的代码：</p>\n<pre><code class=\"language-js\">// 第六版\nfunction debounce(func, wait, immediate) {\n\n    var timeout, result;\n\n    var debounced = function () {\n        var context = this;\n        var args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            // 如果已经执行过，不再执行\n            var callNow = !timeout;\n            timeout = setTimeout(function(){\n                timeout = null;\n            }, wait)\n            if (callNow) result = func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n        return result;\n    };\n\n    debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = null;\n    };\n\n    return debounced;\n}\n</code></pre>\n<p>那么该如何使用这个 cancel 函数呢？依然是以上面的 demo 为例：</p>\n<pre><code class=\"language-js\">var count = 1;\nvar container = document.getElementById('container');\n\nfunction getUserAction(e) {\n    container.innerHTML = count++;\n};\n\nvar setUseAction = debounce(getUserAction, 10000, true);\n\ncontainer.onmousemove = setUseAction;\n\ndocument.getElementById(&quot;button&quot;).addEventListener('click', function(){\n    setUseAction.cancel();\n})\n</code></pre>\n<p>演示效果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/debounce/debounce-cancel.gif\" alt=\"debounce-cancel\"></p>\n<p>至此我们已经完整实现了一个 underscore 中的 debounce 函数，恭喜，撒花！</p>\n<h2>演示代码</h2>\n<p>相关的代码可以在 <a href=\"https://github.com/mqyqingfeng/Blog/tree/master/demos/debounce\">Github 博客仓库</a> 中找到</p>\n<h2>专题系列</h2>\n<p>JavaScript专题系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript专题系列预计写二十篇左右，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究(xi) underscore 和 jQuery 的实现方式。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>\n"}