{"code":0,"data":"<h2>前言</h2>\n<p>在<a href=\"https://github.com/mqyqingfeng/Blog/issues/4\">《JavaScript深入之执行上下文栈》</a>中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p>\n<p>对于每个执行上下文，都有三个重要属性：</p>\n<ul>\n<li>变量对象(Variable object，VO)</li>\n<li>作用域链(Scope chain)</li>\n<li>this</li>\n</ul>\n<p>今天重点讲讲作用域链。</p>\n<h2>作用域链</h2>\n<p>在<a href=\"https://github.com/mqyqingfeng/Blog/issues/5\">《JavaScript深入之变量对象》</a>中讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>\n<p>下面，让我们以一个函数的创建和激活两个时期来讲解作用域链是如何创建和变化的。</p>\n<h2>函数创建</h2>\n<p>在<a href=\"https://github.com/mqyqingfeng/Blog/issues/3\">《JavaScript深入之词法作用域和动态作用域》</a>中讲到，函数的作用域在函数定义的时候就决定了。</p>\n<p>这是因为函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父变量对象到其中，你可以理解 [[scope]] 就是所有父变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链！</p>\n<p>举个例子：</p>\n<pre><code class=\"language-js\"> \nfunction foo() {\n    function bar() {\n        ...\n    }\n}\n\n</code></pre>\n<p>函数创建时，各自的[[scope]]为：</p>\n<pre><code class=\"language-js\">\nfoo.[[scope]] = [\n  globalContext.VO\n];\n\nbar.[[scope]] = [\n    fooContext.AO,\n    globalContext.VO\n];\n\n</code></pre>\n<h2>函数激活</h2>\n<p>当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。</p>\n<p>这时候执行上下文的作用域链，我们命名为 Scope：</p>\n<pre><code class=\"language-js\">\nScope = [AO].concat([[Scope]]);\n\n</code></pre>\n<p>至此，作用域链创建完毕。</p>\n<h2>捋一捋</h2>\n<p>以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的创建过程：</p>\n<pre><code class=\"language-js\">var scope = &quot;global scope&quot;;\nfunction checkscope(){\n    var scope2 = 'local scope';\n    return scope2;\n}\ncheckscope();\n</code></pre>\n<p>执行过程如下：</p>\n<p>1.checkscope 函数被创建，保存作用域链到 内部属性[[scope]]</p>\n<pre><code class=\"language-js\">checkscope.[[scope]] = [\n    globalContext.VO\n];\n</code></pre>\n<p>2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p>\n<pre><code class=\"language-js\">ECStack = [\n    checkscopeContext,\n    globalContext\n];\n</code></pre>\n<p>3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p>\n<pre><code class=\"language-js\">checkscopeContext = {\n    Scope: checkscope.[[scope]],\n}\n</code></pre>\n<p>4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</p>\n<pre><code class=\"language-js\">checkscopeContext = {\n    AO: {\n        arguments: {\n            length: 0\n        },\n        scope2: undefined\n    }，\n    Scope: checkscope.[[scope]],\n}\n</code></pre>\n<p>5.第三步：将活动对象压入 checkscope 作用域链顶端</p>\n<pre><code class=\"language-js\">checkscopeContext = {\n    AO: {\n        arguments: {\n            length: 0\n        },\n        scope2: undefined\n    },\n    Scope: [AO, [[Scope]]]\n}\n</code></pre>\n<p>6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</p>\n<pre><code class=\"language-js\">checkscopeContext = {\n    AO: {\n        arguments: {\n            length: 0\n        },\n        scope2: 'local scope'\n    },\n    Scope: [AO, [[Scope]]]\n}\n</code></pre>\n<p>7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</p>\n<pre><code class=\"language-js\">ECStack = [\n    globalContext\n];\n</code></pre>\n<h2>下一篇文章</h2>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/7\">《JavaScript深入之从ECMAScript规范解读this》</a></p>\n<h2>本文相关链接</h2>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/3\">《JavaScript深入之词法作用域和动态作用域》</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/4\">《JavaScript深入之执行上下文栈》</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/5\">《JavaScript深入之变量对象》</a></p>\n<h2>深入系列</h2>\n<p>JavaScript深入系列目录地址：<a href=\"https://github.com/mqyqingfeng/Blog\">https://github.com/mqyqingfeng/Blog</a>。</p>\n<p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p>\n<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>\n"}