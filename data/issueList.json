{
  "code": 0,
  "data": [
    {
      "url": "https://api.github.com/repos/okfe/weekly/issues/7",
      "repository_url": "https://api.github.com/repos/okfe/weekly",
      "labels_url": "https://api.github.com/repos/okfe/weekly/issues/7/labels{/name}",
      "comments_url": "https://api.github.com/repos/okfe/weekly/issues/7/comments",
      "events_url": "https://api.github.com/repos/okfe/weekly/issues/7/events",
      "html_url": "https://github.com/okfe/weekly/issues/7",
      "id": 507040208,
      "node_id": "MDU6SXNzdWU1MDcwNDAyMDg=",
      "number": 7,
      "title": "React 合成事件",
      "user": {
        "login": "isJaakko",
        "id": 32157176,
        "node_id": "MDQ6VXNlcjMyMTU3MTc2",
        "avatar_url": "https://avatars1.githubusercontent.com/u/32157176?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/isJaakko",
        "html_url": "https://github.com/isJaakko",
        "followers_url": "https://api.github.com/users/isJaakko/followers",
        "following_url": "https://api.github.com/users/isJaakko/following{/other_user}",
        "gists_url": "https://api.github.com/users/isJaakko/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/isJaakko/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/isJaakko/subscriptions",
        "organizations_url": "https://api.github.com/users/isJaakko/orgs",
        "repos_url": "https://api.github.com/users/isJaakko/repos",
        "events_url": "https://api.github.com/users/isJaakko/events{/privacy}",
        "received_events_url": "https://api.github.com/users/isJaakko/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1418593634,
          "name": "JavaScript",
          "color": "bfd4f2"
        },
        {
          "id": 1630718903,
          "name": "React",
          "color": "4bd8ff"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-15T06:44:10Z",
      "updated_at": "2019-10-22T05:10:44Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "## React 合成事件\r\n\r\n### 为什么有合成事件\r\n\r\n如果在 `DOM` 节点上绑定过多的事件处理函数，会影响页面的性能。`React` 为了避免这类 `DOM` 事件的滥用，同时保证跨浏览器兼容性，实现了一个中间层 `SyntheticEvent`。\r\n\r\n> 绑定过多的事件处理函数影响性能是由多方面原因造成的。首先，函数也是对象，会占用内存，内存中的对象越多，性能就越差；其次，必须事先指定所有事件处理程序需要多次访问 DOM，会延迟页面交互就绪时间。\r\n\r\n`SyntheticEvent` 实现原理是通过事件委托，将监听事件绑定在 `document` 上，当事件冒泡至 `document` 处，将事件交给对应的处理函数处理。\r\n\r\n### 事件池\r\n`SyntheticEvent` 是合并而来。这意味着 `SyntheticEvent` 对象可能会被重用，在事件回调函数被调用后，所有的属性都会被清空，所以不能通过异步访问事件。\r\n```\r\nfunction onClick(event) {\r\n  console.log(event); // => nullified object.\r\n  console.log(event.type); // => \"click\"\r\n  const eventType = event.type; // => \"click\"\r\n\r\n  setTimeout(function() {\r\n    console.log(event.type); // => null\r\n    console.log(eventType); // => \"click\"\r\n  }, 0);\r\n\r\n  // 不起作用，this.state.clickEvent 的值将会只包含 null\r\n  this.setState({clickEvent: event});\r\n\r\n  // 你仍然可以导出事件属性\r\n  this.setState({eventType: event.type});\r\n}\r\n```\r\n\r\n如果需要访问事件属性，需在事件上调用 `event.persist()`，允许用户代码保留对事件的引用。\r\n\r\n### 合成事件与原生事件\r\n\r\n`React` 元素的事件处理和 `DOM` 元素的类似，但是也有一些区别:\r\n\r\n- `React` 事件采用小驼峰式命名。\r\n- 使用 `JSX` 语法时需要传入一个函数作为事件处理函数，而不是一个字符串。\r\n\r\n```\r\n<!--- 原生 DOM -->\r\n<button onclick=\"activateLasers()\">\r\n  Activate Lasers\r\n</button>\r\n\r\n<!--- React -->\r\n<button onClick={activateLasers}>\r\n  Activate Lasers\r\n</button>\r\n```\r\n\r\n- `React` 组件上声明的事件最终都绑定到了 `document` 节点上，并非组件对应的 `DOM` 节点。\r\n\r\n### 支持的事件\r\n详情查看 [Supported Events](https://reactjs.org/docs/events.html#supported-events)\r\n\r\n这些事件处理函数在冒泡阶段被触发。如需在捕获阶段处理，则应为事件名添加 `Capture`。例如，处理捕获阶段的点击事件使用 `onClickCapture`。\r\n\r\n如果需要访问原生事件，在 `SyntheticEvent` 对象中可以通过 `nativeEvent` 属性访问到。除此之外，每个 `SyntheticEvent` 对象都包含以下属性：\r\n```\r\n    - boolean bubbles\r\n    - boolean cancelable\r\n    - DOMEventTarget currentTarget\r\n    - boolean defaultPrevented\r\n    - number eventPhase\r\n    - boolean isTrusted\r\n    - DOMEvent nativeEvent\r\n    - void preventDefault()\r\n    - boolean isDefaultPrevented()\r\n    - void stopPropagation()\r\n    - boolean isPropagationStopped()\r\n    - DOMEventTarget target\r\n    - number timeStamp\r\n    - string type\r\n```\r\n\r\n截止 `v0.14`，当事件处理函数返回 `false` 时，不再阻止事件冒泡。你可以选择使用 `e.stopPropagation()` 或者 `e.preventDefault()` 替代。\r\n\r\n### 在 React 中使用原生事件\r\n由于原生事件需要绑定在真实 `DOM` 上，所以一般是在 `componentDidMount` 阶段 `ref` 的函数执行阶段进行绑定操作，在 `componentWillUnmount` 阶段进行解绑操作以避免内存泄漏。\r\n\r\n```\r\nclass TestEvent extends React.Component {\r\n  handleClick = e => {\r\n    console.log(e);\r\n  };\r\n  \r\n  handleClick\r\n\r\n  componentDidMount() {\r\n    const thisDOM = ReactDOM.findDOMNode(this);\r\n    thisDOM.addEventListener(\"click\", this.handleClick);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    const thisDOM = ReactDOM.findDOMNode(this);\r\n    thisDOM.removeEventListener(\"click\", this.handleClick);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button className=\"test-event\" onClick={this.handleClick}>\r\n        event\r\n      </button>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n原生事件与合成事件执行顺序如何？\r\n```\r\nclass Event extends React.Component {\r\n  handleSyntheticClick = e => {\r\n    e.persist();\r\n    console.log(\"syntheticClick\");\r\n  };\r\n\r\n  handleNativeClick = e => {\r\n    console.log(\"nativeClick\");\r\n  };\r\n\r\n  componentDidMount() {\r\n    const thisDOM = ReactDOM.findDOMNode(this);\r\n    thisDOM.addEventListener(\"click\", this.handleNativeClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const thisDOM = ReactDOM.findDOMNode(this);\r\n    thisDOM.removeEventListener(\"click\", this.handleNativeClick);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button className=\"test-event\" onClick={this.handleSyntheticClick}>\r\n        event\r\n      </button>\r\n    );\r\n  }\r\n}\r\n// 控制台输出\r\n// nativeClick\r\n// syntheticClick\r\n```\r\n可以得知原生事件会先执行。\r\n\r\n假如阻止了原生事件的冒泡呢？\r\n```\r\n  handleNativeClick = e => {\r\n    e.stopPropagation();\r\n    console.log(\"nativeClick\");\r\n  };\r\n  \r\n  // 控制台输出\r\n  // nativeClick\r\n```\r\n\r\n原生事件被阻止冒泡后，事件无法冒泡至 `document`，故合成事件无法执行，进一步证实了合成事件是对原生事件的封装。\r\n\r\n### 总结\r\n`React` 合成事件，通过事件代理的方式，在 `document` 上添加事件监听程序，并调用事件对应处理程序，而并非在对应的 `DOM` 节点上处理。节省了一定性能，并解决了跨浏览器兼容性问题。\r\n\r\n合成事件本质上是对原生事件的封装，并保留原生事件相同接口。\r\n\r\n要深入了解具体实现过程还需要去阅读源码，下一步的目标就是试着去阅读一小部分源码。"
    },
    {
      "url": "https://api.github.com/repos/okfe/weekly/issues/6",
      "repository_url": "https://api.github.com/repos/okfe/weekly",
      "labels_url": "https://api.github.com/repos/okfe/weekly/issues/6/labels{/name}",
      "comments_url": "https://api.github.com/repos/okfe/weekly/issues/6/comments",
      "events_url": "https://api.github.com/repos/okfe/weekly/issues/6/events",
      "html_url": "https://github.com/okfe/weekly/issues/6",
      "id": 506522102,
      "node_id": "MDU6SXNzdWU1MDY1MjIxMDI=",
      "number": 6,
      "title": "更新线上文章列表",
      "user": {
        "login": "lena126",
        "id": 46647789,
        "node_id": "MDQ6VXNlcjQ2NjQ3Nzg5",
        "avatar_url": "https://avatars0.githubusercontent.com/u/46647789?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lena126",
        "html_url": "https://github.com/lena126",
        "followers_url": "https://api.github.com/users/lena126/followers",
        "following_url": "https://api.github.com/users/lena126/following{/other_user}",
        "gists_url": "https://api.github.com/users/lena126/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lena126/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lena126/subscriptions",
        "organizations_url": "https://api.github.com/users/lena126/orgs",
        "repos_url": "https://api.github.com/users/lena126/repos",
        "events_url": "https://api.github.com/users/lena126/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lena126/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-14T08:52:17Z",
      "updated_at": "2019-10-14T08:52:17Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "### 1. Promise.all() 批量执行一堆函数\r\n1. Promise.all([p1,p2,p3,...])用于将多个Promise实例，包装成一个新的Promise实例。\r\n2. 返回的实例就是普通Promise。\r\n3. 它接收一个数组作为参数\r\n4. 数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态的改变\r\n5. 当所有子Promise都完成，该Promise完成，返回值是全部值得数组\r\n6. 有任何一个失败，该Promise失败，返回值时第一个失败的子Promise的结果。\r\n\r\n<details>\r\n    <summary><span>示例代码</span></summary>\r\n    \r\n            console.log('here we go'); // eslint-disable-line\r\n        Promise.all([1,2,3]) //(1)\r\n            .then(all=>{\r\n                console.log('1',all); // eslint-disable-line\r\n                return Promise.all([function(){ //(2)\r\n                    console.log('ooxx'); // eslint-disable-line\r\n                },'xxoo',false]);\r\n            })\r\n            .then(all=>{ \r\n                console.log('2',all); // eslint-disable-line\r\n                let p1 = new Promise(resolve => { //(3)\r\n                    setTimeout(()=>{\r\n                        resolve('I\\'m P1');\r\n                    },1500)\r\n                });\r\n                let p2 = new Promise(resolve => { //(4)\r\n                    setTimeout(()=>{ \r\n                        resolve('I\\'m P2');\r\n                    },1450)\r\n                });\r\n                return Promise.all([p1,p2]); //(5)\r\n            })\r\n            .then(all=>{ //(6)\r\n                console.log('3',all); // eslint-disable-line\r\n                let p1=new Promise(resolve => { \r\n                    setTimeout(()=>{\r\n                        resolve('I\\'m P1');\r\n                    },1500);\r\n                });\r\n                let p2 = new Promise((resolve, reject) => { //(7)\r\n                    setTimeout(()=>{\r\n                        reject('I\\'m P2');\r\n                    },1000);\r\n                });\r\n                let p3=new Promise((resolve, reject) => { \r\n                    setTimeout(()=>{\r\n                        reject('I\\'m P3');\r\n                    },3000);\r\n                });\r\n                return Promise.all([p1,p2,p3]); //(8) \r\n            })\r\n            .then(all=>{ //(9)\r\n                console.log('all',all); // eslint-disable-line\r\n            })\r\n            .catch(err =>{ //(10)\r\n                console.log('catch',err); // eslint-disable-line\r\n            })\r\n</details>\r\n\r\n<br>\r\n<p style=\"color:#909090\">执行结果：</p>\r\n\r\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g78n3mfxtkj315k07ktaq.jpg)\r\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g78n5htkc7j316407840i.jpg)\r\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g78o6ed5w3j316207ejtf.jpg)\r\n![]()\r\n\r\n<p style=\"color:#909090\">结果分析：</p>\r\n1. (1)中传入的是[1,2,3]，不是数组，结果会被立刻返回\r\n2. (2)中传入的是function，不是Promise实例，也会被立刻执行\r\n3.（5)中接收到的都是Promise实例，因此会等待1.5s左右返回两个Promise(3)(4)的返回值组成的结果\r\n4. (8)有p1,p2,p3，同时p2,p3都会返回错误，p2会错误的早一些，所以(9)会被跳过，同时(10)catch触发，捕获到错误，是由第一个触发错误的Promise返回的值(7)\r\n\r\n### 2. 错误处理\r\n\r\n##### 在Promise中错误处理有两种做法：\r\n1. `reject('错误信息').then(null,message=>{})`\r\n2. `throw new Errow('错误信息').catch(message =<{})`\r\n推荐使用第二种，更加清晰好读，并且可以捕获前面的错误。\r\n\r\n##### .catch()+.then()会发生什么？\r\n\r\n<details>\r\n    <summary><span>示例代码</span></summary>\r\n    \r\n        console.log('here we go'); // eslint-disable-line\r\n        new Promise( resolve => {\r\n            setTimeout(()=>{\r\n                resolve();\r\n            }, 1000)\r\n        })\r\n           .then( value => {\r\n               console.log('start'); // eslint-disable-line\r\n               throw new Error('test error');\r\n           })\r\n            .catch(err=>{ // (1)\r\n                console.log('I catch',err);\r\n                // throw new Error('another error');\r\n                // eslint-disable-line\r\n            })\r\n            .then(()=>{\r\n                console.log('arrive here'); // eslint-disable-line\r\n            })\r\n            .then(()=>{\r\n                console.log('... and here'); // eslint-disable-line\r\n            })\r\n            .catch(err=>{\r\n                console.log('No,I catch:',err); // eslint-disable-line\r\n            })    \r\n</details>\r\n\r\ncatch也会返回一个Promise实例，并且如果其中没有抛出错误这个Promise实例也是fulfilled的状态。\r\n\r\n打开注释调的代码后执行结果：\r\nanother err会使得catch(1)返回的Promise实例变为rejected状态，绕过下面两个then函数的执行，进入到下一个catch函数。\r\n\r\n注意：建议在所有队列最后都加上.catch(),因为队列的执行全部都是异步的，很可能生成的时候是没问题的，而出问题时却不知道，引发意想不到的问题。\r\n而我们通过捕获，把错误处理一下或记录下来，都会有比较好的效果。\r\n\r\n### 3. 实现队列\r\n有时候我们不希望所有动作一起发生，而是按照一定顺序，逐个进行。\r\n通过Promise.then()返回一个新的Promise实例的特性，串成队列来进行操作。\r\n如果有一组要做的事，有两种方式：\r\n（1）使用.forEach()、for循环\r\n```\r\n    function queue(things){\r\n        let promise = Promise.resolve();\r\n        things.forEach(things=>{\r\n            promise = promise.then(()=>{\r\n                return new Promise(resolve => {\r\n                    doThing(thing,()=>{\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n    queue(['lots','of','things',...]);\r\n```\r\n（2）使用.reduce() 从数组的一端遍历数组，直到另外一端\r\n\r\n```\r\n   function queue(things){\r\n        let promise = Promise.resolve();\r\n        things.reduce(()=>{\r\n            return new Promise(resolve => {\r\n                doThing(thing,()=>{\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n        promise.resolve();\r\n    }\r\n    queue(['lots','of','things',...]);\r\n```\r\n#### 两个常见错误：\r\n（1）中与forEach连用时，没有把.then()产生的新Promise实例赋给Promise，没有生成队列，造成当Promise完成时，后面所有的then会同时触发\r\n（2）中与reduce连用时，Promise实例创建之后，会立刻运行执行器代码，所以所有的Promise也会立刻执行，不会等待队列的下一步才执行。\r\n\r\n### 4. 总结\r\n通过学习，发现自己在Promise使用上还是存在很多问题的，对它的可能出现的错误的抛出处理、队列执行的具体顺序还是不能把控的，加上项目中websocket数据的推送，更晕了，这个是要搞定的大事情。"
    },
    {
      "url": "https://api.github.com/repos/okfe/weekly/issues/5",
      "repository_url": "https://api.github.com/repos/okfe/weekly",
      "labels_url": "https://api.github.com/repos/okfe/weekly/issues/5/labels{/name}",
      "comments_url": "https://api.github.com/repos/okfe/weekly/issues/5/comments",
      "events_url": "https://api.github.com/repos/okfe/weekly/issues/5/events",
      "html_url": "https://github.com/okfe/weekly/issues/5",
      "id": 466181370,
      "node_id": "MDU6SXNzdWU0NjYxODEzNzA=",
      "number": 5,
      "title": "Nunjucks的一些Demo",
      "user": {
        "login": "learoyd",
        "id": 50789009,
        "node_id": "MDQ6VXNlcjUwNzg5MDA5",
        "avatar_url": "https://avatars3.githubusercontent.com/u/50789009?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/learoyd",
        "html_url": "https://github.com/learoyd",
        "followers_url": "https://api.github.com/users/learoyd/followers",
        "following_url": "https://api.github.com/users/learoyd/following{/other_user}",
        "gists_url": "https://api.github.com/users/learoyd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/learoyd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/learoyd/subscriptions",
        "organizations_url": "https://api.github.com/users/learoyd/orgs",
        "repos_url": "https://api.github.com/users/learoyd/repos",
        "events_url": "https://api.github.com/users/learoyd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/learoyd/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-07-10T08:46:54Z",
      "updated_at": "2019-07-10T08:46:54Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "## 1. Nunjucks的一些Demo\r\n**1) 避免输出恶意脚本**\r\n```\r\n<h1>Hello {{ name }}</h1>\r\n```\r\n```\r\nvar s = env.render('hello.html', { name: '<script>alert(\"小明\")</script>' });\r\nconsole.log(s);\r\n```\r\n```\r\n<h1>Hello &lt;script&gt;alert(\"小明\")&lt;/script&gt;</h1>\r\n```\r\n\r\n---\r\n\r\n**2）循环**\r\n```\r\n<!-- 循环输出名字 -->\r\n<body>\r\n    <h3>Fruits List</h3>\r\n    {% for f in fruits %}\r\n    <p>{{ f }}</p>\r\n    {% endfor %}\r\n</body>\r\n```\r\n\r\n**3) 模版的继承**\r\n```\r\n<html><body>\r\n{% block header %} <h3>Unnamed</h3> {% endblock %}\r\n{% block body %} <div>No body</div> {% endblock %}\r\n{% block footer %} <div>copyright</div> {% endblock %}\r\n</body>\r\n```\r\n```\r\n{% extends 'base.html' %}\r\n\r\n{% block header %}<h1>{{ header }}</h1>{% endblock %}\r\n\r\n{% block body %}<p>{{ body }}</p>{% endblock %}\r\n```\r\n```\r\nconsole.log(env.render('extend.html', {\r\n    header: 'Hello',\r\n    body: 'bla bla bla...'\r\n}));\r\n```\r\n```\r\n<html><body>\r\n<h1>Hello</h1>\r\n<p>bla bla bla...</p>\r\n<div>copyright</div> <-- footer没有重定义，所以仍使用父模板的内容\r\n</body>\r\n```"
    },
    {
      "url": "https://api.github.com/repos/okfe/weekly/issues/4",
      "repository_url": "https://api.github.com/repos/okfe/weekly",
      "labels_url": "https://api.github.com/repos/okfe/weekly/issues/4/labels{/name}",
      "comments_url": "https://api.github.com/repos/okfe/weekly/issues/4/comments",
      "events_url": "https://api.github.com/repos/okfe/weekly/issues/4/events",
      "html_url": "https://github.com/okfe/weekly/issues/4",
      "id": 465553700,
      "node_id": "MDU6SXNzdWU0NjU1NTM3MDA=",
      "number": 4,
      "title": "chuan issue test 3",
      "user": {
        "login": "Bigggggggggger",
        "id": 42070293,
        "node_id": "MDQ6VXNlcjQyMDcwMjkz",
        "avatar_url": "https://avatars2.githubusercontent.com/u/42070293?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bigggggggggger",
        "html_url": "https://github.com/Bigggggggggger",
        "followers_url": "https://api.github.com/users/Bigggggggggger/followers",
        "following_url": "https://api.github.com/users/Bigggggggggger/following{/other_user}",
        "gists_url": "https://api.github.com/users/Bigggggggggger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Bigggggggggger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Bigggggggggger/subscriptions",
        "organizations_url": "https://api.github.com/users/Bigggggggggger/orgs",
        "repos_url": "https://api.github.com/users/Bigggggggggger/repos",
        "events_url": "https://api.github.com/users/Bigggggggggger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Bigggggggggger/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-07-09T03:44:26Z",
      "updated_at": "2019-07-09T03:44:26Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "4 test issue"
    },
    {
      "url": "https://api.github.com/repos/okfe/weekly/issues/3",
      "repository_url": "https://api.github.com/repos/okfe/weekly",
      "labels_url": "https://api.github.com/repos/okfe/weekly/issues/3/labels{/name}",
      "comments_url": "https://api.github.com/repos/okfe/weekly/issues/3/comments",
      "events_url": "https://api.github.com/repos/okfe/weekly/issues/3/events",
      "html_url": "https://github.com/okfe/weekly/issues/3",
      "id": 465552225,
      "node_id": "MDU6SXNzdWU0NjU1NTIyMjU=",
      "number": 3,
      "title": "open issue test ",
      "user": {
        "login": "Bigggggggggger",
        "id": 42070293,
        "node_id": "MDQ6VXNlcjQyMDcwMjkz",
        "avatar_url": "https://avatars2.githubusercontent.com/u/42070293?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bigggggggggger",
        "html_url": "https://github.com/Bigggggggggger",
        "followers_url": "https://api.github.com/users/Bigggggggggger/followers",
        "following_url": "https://api.github.com/users/Bigggggggggger/following{/other_user}",
        "gists_url": "https://api.github.com/users/Bigggggggggger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Bigggggggggger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Bigggggggggger/subscriptions",
        "organizations_url": "https://api.github.com/users/Bigggggggggger/orgs",
        "repos_url": "https://api.github.com/users/Bigggggggggger/repos",
        "events_url": "https://api.github.com/users/Bigggggggggger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Bigggggggggger/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-07-09T03:37:16Z",
      "updated_at": "2019-07-09T03:37:16Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "chuan test"
    },
    {
      "url": "https://api.github.com/repos/okfe/weekly/issues/1",
      "repository_url": "https://api.github.com/repos/okfe/weekly",
      "labels_url": "https://api.github.com/repos/okfe/weekly/issues/1/labels{/name}",
      "comments_url": "https://api.github.com/repos/okfe/weekly/issues/1/comments",
      "events_url": "https://api.github.com/repos/okfe/weekly/issues/1/events",
      "html_url": "https://github.com/okfe/weekly/issues/1",
      "id": 459532596,
      "node_id": "MDU6SXNzdWU0NTk1MzI1OTY=",
      "number": 1,
      "title": "2019.06.23",
      "user": {
        "login": "notejs",
        "id": 2126551,
        "node_id": "MDQ6VXNlcjIxMjY1NTE=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/2126551?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/notejs",
        "html_url": "https://github.com/notejs",
        "followers_url": "https://api.github.com/users/notejs/followers",
        "following_url": "https://api.github.com/users/notejs/following{/other_user}",
        "gists_url": "https://api.github.com/users/notejs/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/notejs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/notejs/subscriptions",
        "organizations_url": "https://api.github.com/users/notejs/orgs",
        "repos_url": "https://api.github.com/users/notejs/repos",
        "events_url": "https://api.github.com/users/notejs/events{/privacy}",
        "received_events_url": "https://api.github.com/users/notejs/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1418593715,
          "name": "CSS/CSS3",
          "color": "986fce"
        },
        {
          "id": 1418593833,
          "name": "HTML/HTML5",
          "color": "f28c98"
        },
        {
          "id": 1418594176,
          "name": "HTTP/HTTP2",
          "color": "2371c4"
        },
        {
          "id": 1418593634,
          "name": "JavaScript",
          "color": "bfd4f2"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-06-23T03:36:29Z",
      "updated_at": "2019-06-23T03:47:57Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "body": "## test\r\n\r\n#### test\r\n\r\n```\r\nvar a = 0;\r\n```"
    }
  ]
}